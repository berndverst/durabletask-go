// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: backend/v1/worker.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for Ping.
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{0}
}

// Response for Ping.
type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{1}
}

// Message sent by the client (worker) in the ConnectWorker stream.
// Request for ConnectWorker.
// Includes information about the current worker's capabilities
type ConnectWorkerClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message to include.
	// This is optional, and no message indicates a simple ping.
	//
	// Types that are assignable to Message:
	//
	//	*ConnectWorkerClientMessage_EstablishWorkerConnection
	//	*ConnectWorkerClientMessage_CompleteOrchestration
	//	*ConnectWorkerClientMessage_CompleteActivity
	//	*ConnectWorkerClientMessage_AbandonOrchestration
	//	*ConnectWorkerClientMessage_AbandonActivity
	//	*ConnectWorkerClientMessage_BackOff
	Message isConnectWorkerClientMessage_Message `protobuf_oneof:"message"`
}

func (x *ConnectWorkerClientMessage) Reset() {
	*x = ConnectWorkerClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerClientMessage) ProtoMessage() {}

func (x *ConnectWorkerClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerClientMessage.ProtoReflect.Descriptor instead.
func (*ConnectWorkerClientMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{2}
}

func (m *ConnectWorkerClientMessage) GetMessage() isConnectWorkerClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetEstablishWorkerConnection() *EstablishWorkerConnectionMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_EstablishWorkerConnection); ok {
		return x.EstablishWorkerConnection
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetCompleteOrchestration() *CompleteOrchestrationMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_CompleteOrchestration); ok {
		return x.CompleteOrchestration
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetCompleteActivity() *CompleteActivityMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_CompleteActivity); ok {
		return x.CompleteActivity
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetAbandonOrchestration() *AbandonOrchestrationMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_AbandonOrchestration); ok {
		return x.AbandonOrchestration
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetAbandonActivity() *AbandonActivityMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_AbandonActivity); ok {
		return x.AbandonActivity
	}
	return nil
}

func (x *ConnectWorkerClientMessage) GetBackOff() *BackOffMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerClientMessage_BackOff); ok {
		return x.BackOff
	}
	return nil
}

type isConnectWorkerClientMessage_Message interface {
	isConnectWorkerClientMessage_Message()
}

type ConnectWorkerClientMessage_EstablishWorkerConnection struct {
	// Establish the connection of a new worker.
	// This is sent once, and only once, as the first message from the worker on ConnectWorker.
	// Servers should expect to receive this message within the first seconds of the ConnectWorker stream being established,
	// and should cancel the stream if they don't receive in that time frame (or if they receive a different message before the EstablishWorkerConnectionMessage one).
	EstablishWorkerConnection *EstablishWorkerConnectionMessage `protobuf:"bytes,1,opt,name=establish_worker_connection,json=establishWorkerConnection,proto3,oneof"`
}

type ConnectWorkerClientMessage_CompleteOrchestration struct {
	// Complete an orchestration work item.
	CompleteOrchestration *CompleteOrchestrationMessage `protobuf:"bytes,2,opt,name=complete_orchestration,json=completeOrchestration,proto3,oneof"`
}

type ConnectWorkerClientMessage_CompleteActivity struct {
	// Complete an activity work item.
	CompleteActivity *CompleteActivityMessage `protobuf:"bytes,3,opt,name=complete_activity,json=completeActivity,proto3,oneof"`
}

type ConnectWorkerClientMessage_AbandonOrchestration struct {
	// Abandon an orchestration work item.
	AbandonOrchestration *AbandonOrchestrationMessage `protobuf:"bytes,4,opt,name=abandon_orchestration,json=abandonOrchestration,proto3,oneof"`
}

type ConnectWorkerClientMessage_AbandonActivity struct {
	// Abandon an activity work item.
	AbandonActivity *AbandonActivityMessage `protobuf:"bytes,5,opt,name=abandon_activity,json=abandonActivity,proto3,oneof"`
}

type ConnectWorkerClientMessage_BackOff struct {
	// Pause the delivery of work items, or resume if already paused.
	BackOff *BackOffMessage `protobuf:"bytes,6,opt,name=back_off,json=backOff,proto3,oneof"`
}

func (*ConnectWorkerClientMessage_EstablishWorkerConnection) isConnectWorkerClientMessage_Message() {}

func (*ConnectWorkerClientMessage_CompleteOrchestration) isConnectWorkerClientMessage_Message() {}

func (*ConnectWorkerClientMessage_CompleteActivity) isConnectWorkerClientMessage_Message() {}

func (*ConnectWorkerClientMessage_AbandonOrchestration) isConnectWorkerClientMessage_Message() {}

func (*ConnectWorkerClientMessage_AbandonActivity) isConnectWorkerClientMessage_Message() {}

func (*ConnectWorkerClientMessage_BackOff) isConnectWorkerClientMessage_Message() {}

// EstablishWorkerConnectionMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It is sent as the first message from the worker over the ConnectWorker stream, and it contains information about the worker.
type EstablishWorkerConnectionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the SDK used by the worker.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Worker ID, which is necessary and required for re-connecting only, after a worker that had established a connection
	// to the service had the connection severed for some reason.
	// For reconnections, workers should include as worker_id the value of the worker_id received from the server in
	// a previous connection. Workers should treat that as an opaque value.
	//
	// For workers connecting to the service for the first time (that is, new worker processes), this must be empty.
	//
	// If a worker_id is passed:
	//
	//   - If the worker_id is for a worker that does not exist (including the case of a worker which has been orphaned for too
	//     long, so reconnections are not allowed anymore), the service throws a NotFound gRPC error.
	//     Workers should not attempt to retry in this case.
	//   - If the worker_id is for a worker that is already connected to a different instance, the service throws a
	//     FailedPrecondition gRPC error.
	//     Note that this could also happen in case the service hasn't detected the worker as orphaned yet. For example, if the
	//     worker has disconnected because the service instance crashed, it can take up to 30s for the service to recognize
	//     the worker has orphaned. As such, workers which receive a FailedPrecondition exception should retry reconnecting again
	//     (after a delay), until successful or a NotFound exception is thrown.
	//
	// Note: when reconnecting, it's expected, and assumed, that the list of supported orchestrator and activity function
	// types has not changed compared to the initial connection.
	WorkerId string `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Maximum number of orchestration work items concurrently active on a worker across all orchestration types.
	// A value of 0 means no limit
	ConcurrentOrchestrationsLimit uint32 `protobuf:"varint,11,opt,name=concurrent_orchestrations_limit,json=concurrentOrchestrationsLimit,proto3" json:"concurrent_orchestrations_limit,omitempty"`
	// Maximum number of activity work items concurrently active on a worker across all orchestration types.
	// A value of 0 means no limit
	ConcurrentActivitiesLimit uint32 `protobuf:"varint,12,opt,name=concurrent_activities_limit,json=concurrentActivitiesLimit,proto3" json:"concurrent_activities_limit,omitempty"`
	// List of supported orchestrator functions.
	OrchestratorFunction []*EstablishWorkerConnectionMessage_OrchestratorFunctionType `protobuf:"bytes,20,rep,name=orchestrator_function,json=orchestratorFunction,proto3" json:"orchestrator_function,omitempty"`
	// List of supported activity functions.
	ActivityFunction []*EstablishWorkerConnectionMessage_ActivityFunctionType `protobuf:"bytes,21,rep,name=activity_function,json=activityFunction,proto3" json:"activity_function,omitempty"`
}

func (x *EstablishWorkerConnectionMessage) Reset() {
	*x = EstablishWorkerConnectionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishWorkerConnectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishWorkerConnectionMessage) ProtoMessage() {}

func (x *EstablishWorkerConnectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishWorkerConnectionMessage.ProtoReflect.Descriptor instead.
func (*EstablishWorkerConnectionMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{3}
}

func (x *EstablishWorkerConnectionMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EstablishWorkerConnectionMessage) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *EstablishWorkerConnectionMessage) GetConcurrentOrchestrationsLimit() uint32 {
	if x != nil {
		return x.ConcurrentOrchestrationsLimit
	}
	return 0
}

func (x *EstablishWorkerConnectionMessage) GetConcurrentActivitiesLimit() uint32 {
	if x != nil {
		return x.ConcurrentActivitiesLimit
	}
	return 0
}

func (x *EstablishWorkerConnectionMessage) GetOrchestratorFunction() []*EstablishWorkerConnectionMessage_OrchestratorFunctionType {
	if x != nil {
		return x.OrchestratorFunction
	}
	return nil
}

func (x *EstablishWorkerConnectionMessage) GetActivityFunction() []*EstablishWorkerConnectionMessage_ActivityFunctionType {
	if x != nil {
		return x.ActivityFunction
	}
	return nil
}

// CompleteOrchestrationMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It indicates that an orchestration has been completed.
type CompleteOrchestrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the orchestration.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Completion token sent in the ExecuteOrchestrationMessage.
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Custom status to update (optional).
	CustomStatus []byte `protobuf:"bytes,10,opt,name=custom_status,json=customStatus,proto3" json:"custom_status,omitempty"`
	// If true, resets the custom status, removing the existing one (optional).
	ResetCustomStatus bool `protobuf:"varint,11,opt,name=reset_custom_status,json=resetCustomStatus,proto3" json:"reset_custom_status,omitempty"`
	// Actions to schedule.
	Actions []*OrchestratorAction `protobuf:"bytes,20,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *CompleteOrchestrationMessage) Reset() {
	*x = CompleteOrchestrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteOrchestrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteOrchestrationMessage) ProtoMessage() {}

func (x *CompleteOrchestrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteOrchestrationMessage.ProtoReflect.Descriptor instead.
func (*CompleteOrchestrationMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{4}
}

func (x *CompleteOrchestrationMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *CompleteOrchestrationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompleteOrchestrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CompleteOrchestrationMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *CompleteOrchestrationMessage) GetCustomStatus() []byte {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

func (x *CompleteOrchestrationMessage) GetResetCustomStatus() bool {
	if x != nil {
		return x.ResetCustomStatus
	}
	return false
}

func (x *CompleteOrchestrationMessage) GetActions() []*OrchestratorAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// CompleteActivityMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It indicates that an activity has been completed.
type CompleteActivityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the activity.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the activity.
	// string version = 4;
	// Completion token sent in the ExecuteActivityMessage
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Output payload (optional)
	Result []byte `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	// Failure details for failed activities
	FailureDetails *FailureDetails `protobuf:"bytes,10,opt,name=failure_details,json=failureDetails,proto3" json:"failure_details,omitempty"`
}

func (x *CompleteActivityMessage) Reset() {
	*x = CompleteActivityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteActivityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteActivityMessage) ProtoMessage() {}

func (x *CompleteActivityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteActivityMessage.ProtoReflect.Descriptor instead.
func (*CompleteActivityMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteActivityMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *CompleteActivityMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompleteActivityMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *CompleteActivityMessage) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteActivityMessage) GetFailureDetails() *FailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

// AbandonOrchestrationMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It indicates that an orchestration has been abandoned.
type AbandonOrchestrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the orchestration.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Completion token sent in the ExecuteOrchestrationMessage
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Optional delay for retrying.
	// If not specified, the operation will be retried immediately.
	RetryDelay *Delay `protobuf:"bytes,10,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
}

func (x *AbandonOrchestrationMessage) Reset() {
	*x = AbandonOrchestrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonOrchestrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonOrchestrationMessage) ProtoMessage() {}

func (x *AbandonOrchestrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonOrchestrationMessage.ProtoReflect.Descriptor instead.
func (*AbandonOrchestrationMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{6}
}

func (x *AbandonOrchestrationMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *AbandonOrchestrationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbandonOrchestrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AbandonOrchestrationMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *AbandonOrchestrationMessage) GetRetryDelay() *Delay {
	if x != nil {
		return x.RetryDelay
	}
	return nil
}

// AbandonActivityMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It indicates that an activity has been abandoned.
type AbandonActivityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the activity.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the activity.
	// string version = 4;
	// Completion token sent in the ExecuteActivityMessage
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Optional delay for retrying.
	// If not specified, the operation will be retried immediately.
	RetryDelay *Delay `protobuf:"bytes,10,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
}

func (x *AbandonActivityMessage) Reset() {
	*x = AbandonActivityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonActivityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonActivityMessage) ProtoMessage() {}

func (x *AbandonActivityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonActivityMessage.ProtoReflect.Descriptor instead.
func (*AbandonActivityMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{7}
}

func (x *AbandonActivityMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *AbandonActivityMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbandonActivityMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *AbandonActivityMessage) GetRetryDelay() *Delay {
	if x != nil {
		return x.RetryDelay
	}
	return nil
}

// BackOffMessage is one of the messages that can be sent by the worker over ConnectWorker.
// It requests the server to temporarily pause the delivery of work items (or resume the delivery if it was already paused).
type BackOffMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested pause duration.
	// If negative or zero (empty), stops any back-off and allows the service to resume sending work items immediately.
	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *BackOffMessage) Reset() {
	*x = BackOffMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackOffMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackOffMessage) ProtoMessage() {}

func (x *BackOffMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackOffMessage.ProtoReflect.Descriptor instead.
func (*BackOffMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{8}
}

func (x *BackOffMessage) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Message sent by the server in the ConnectWorker stream.
type ConnectWorkerServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message to include.
	// This is optional, and no message indicates a simple ping.
	//
	// Types that are assignable to Message:
	//
	//	*ConnectWorkerServerMessage_WorkerConfiguration
	//	*ConnectWorkerServerMessage_AbandonWorkItems
	//	*ConnectWorkerServerMessage_ExecuteOrchestration
	//	*ConnectWorkerServerMessage_ExecuteActivity
	Message isConnectWorkerServerMessage_Message `protobuf_oneof:"message"`
}

func (x *ConnectWorkerServerMessage) Reset() {
	*x = ConnectWorkerServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerServerMessage) ProtoMessage() {}

func (x *ConnectWorkerServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerServerMessage.ProtoReflect.Descriptor instead.
func (*ConnectWorkerServerMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{9}
}

func (m *ConnectWorkerServerMessage) GetMessage() isConnectWorkerServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ConnectWorkerServerMessage) GetWorkerConfiguration() *WorkerConfiguration {
	if x, ok := x.GetMessage().(*ConnectWorkerServerMessage_WorkerConfiguration); ok {
		return x.WorkerConfiguration
	}
	return nil
}

func (x *ConnectWorkerServerMessage) GetAbandonWorkItems() *AbandonWorkItemsMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerServerMessage_AbandonWorkItems); ok {
		return x.AbandonWorkItems
	}
	return nil
}

func (x *ConnectWorkerServerMessage) GetExecuteOrchestration() *ExecuteOrchestrationMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerServerMessage_ExecuteOrchestration); ok {
		return x.ExecuteOrchestration
	}
	return nil
}

func (x *ConnectWorkerServerMessage) GetExecuteActivity() *ExecuteActivityMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerServerMessage_ExecuteActivity); ok {
		return x.ExecuteActivity
	}
	return nil
}

type isConnectWorkerServerMessage_Message interface {
	isConnectWorkerServerMessage_Message()
}

type ConnectWorkerServerMessage_WorkerConfiguration struct {
	// Send certain configuration options for the worker.
	// This is sent once, and only once, in response to the first message from the worker on ConnectWorker.
	// Clients should expect to receive this message within the first seconds of the ConnectWorker stream being established,
	// and should cancel the stream if they don't receive in that time frame (or if they receive a different message before the WorkerConfiguration one).
	WorkerConfiguration *WorkerConfiguration `protobuf:"bytes,1,opt,name=worker_configuration,json=workerConfiguration,proto3,oneof"`
}

type ConnectWorkerServerMessage_AbandonWorkItems struct {
	// Request the worker to abandon work items related to an orchestration.
	AbandonWorkItems *AbandonWorkItemsMessage `protobuf:"bytes,2,opt,name=abandon_work_items,json=abandonWorkItems,proto3,oneof"`
}

type ConnectWorkerServerMessage_ExecuteOrchestration struct {
	// Start the execution of an orchestration work item.
	ExecuteOrchestration *ExecuteOrchestrationMessage `protobuf:"bytes,10,opt,name=execute_orchestration,json=executeOrchestration,proto3,oneof"`
}

type ConnectWorkerServerMessage_ExecuteActivity struct {
	// Start the execution of an activity work item.
	ExecuteActivity *ExecuteActivityMessage `protobuf:"bytes,11,opt,name=execute_activity,json=executeActivity,proto3,oneof"`
}

func (*ConnectWorkerServerMessage_WorkerConfiguration) isConnectWorkerServerMessage_Message() {}

func (*ConnectWorkerServerMessage_AbandonWorkItems) isConnectWorkerServerMessage_Message() {}

func (*ConnectWorkerServerMessage_ExecuteOrchestration) isConnectWorkerServerMessage_Message() {}

func (*ConnectWorkerServerMessage_ExecuteActivity) isConnectWorkerServerMessage_Message() {}

// WorkerConfiguration is one of the messages that can be sent by the server over ConnectWorker.
// It contains certain configuration options for the worker.
// This is sent in response to the first message from the worker on ConnectWorker.
type WorkerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum interval for the worker to send pings to the service.
	HealthCheckInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	// Worker ID, which can be used by the worker to reconnect to the service after a transient failure.
	// This should be treated as an opaque value.
	WorkerId string `protobuf:"bytes,100,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *WorkerConfiguration) Reset() {
	*x = WorkerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerConfiguration) ProtoMessage() {}

func (x *WorkerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerConfiguration.ProtoReflect.Descriptor instead.
func (*WorkerConfiguration) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{10}
}

func (x *WorkerConfiguration) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

func (x *WorkerConfiguration) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

// ExecuteOrchestrationMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an orchestration work item to execute.
type ExecuteOrchestrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// The unique ID of the execution
	ExecutionId string `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// Name of the orchestration.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Completion token.
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// New history entries, which have not been committed yet.
	// This includes the action(s) to be executed, as well as the payload.
	NewEvents []*Event `protobuf:"bytes,10,rep,name=new_events,json=newEvents,proto3" json:"new_events,omitempty"`
	// Retry count.
	RetryCount uint32 `protobuf:"varint,20,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
}

func (x *ExecuteOrchestrationMessage) Reset() {
	*x = ExecuteOrchestrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteOrchestrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOrchestrationMessage) ProtoMessage() {}

func (x *ExecuteOrchestrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOrchestrationMessage.ProtoReflect.Descriptor instead.
func (*ExecuteOrchestrationMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteOrchestrationMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetNewEvents() []*Event {
	if x != nil {
		return x.NewEvents
	}
	return nil
}

func (x *ExecuteOrchestrationMessage) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

// ExecuteActivityMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an activity work item to execute.
type ExecuteActivityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// The unique ID of the execution
	ExecutionId string `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// Name of the activity.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the activity.
	// string version = 4;
	// Completion token.
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Activity input data (optional).
	Input []byte `protobuf:"bytes,11,opt,name=input,proto3" json:"input,omitempty"`
	// Retry count.
	RetryCount uint32 `protobuf:"varint,20,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
}

func (x *ExecuteActivityMessage) Reset() {
	*x = ExecuteActivityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteActivityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActivityMessage) ProtoMessage() {}

func (x *ExecuteActivityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActivityMessage.ProtoReflect.Descriptor instead.
func (*ExecuteActivityMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteActivityMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *ExecuteActivityMessage) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ExecuteActivityMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteActivityMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *ExecuteActivityMessage) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecuteActivityMessage) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

// AbandonWorkItemsMessage is one of the messages that can be sent by the server over ConnectWorker.
// It requests to abandon any work item related to an orchestration.
type AbandonWorkItemsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// The unique ID of the execution
	ExecutionId string `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *AbandonWorkItemsMessage) Reset() {
	*x = AbandonWorkItemsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemsMessage) ProtoMessage() {}

func (x *AbandonWorkItemsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemsMessage.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemsMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{13}
}

func (x *AbandonWorkItemsMessage) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *AbandonWorkItemsMessage) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

// Request for GetOrchestrationHistory.
type GetOrchestrationHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Last sequence number of the item in the history stack that is cached on the worker.
	// If this is empty or zero, returns the entire history.
	LastItemSequenceNumber int64 `protobuf:"varint,10,opt,name=last_item_sequence_number,json=lastItemSequenceNumber,proto3" json:"last_item_sequence_number,omitempty"`
	// Hash of the last item in the history stack that is cached on the worker.
	// If this is empty, returns the entire history.
	LastItemEventHash []byte `protobuf:"bytes,11,opt,name=last_item_event_hash,json=lastItemEventHash,proto3" json:"last_item_event_hash,omitempty"`
}

func (x *GetOrchestrationHistoryRequest) Reset() {
	*x = GetOrchestrationHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrchestrationHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrchestrationHistoryRequest) ProtoMessage() {}

func (x *GetOrchestrationHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrchestrationHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetOrchestrationHistoryRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrchestrationHistoryRequest) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *GetOrchestrationHistoryRequest) GetLastItemSequenceNumber() int64 {
	if x != nil {
		return x.LastItemSequenceNumber
	}
	return 0
}

func (x *GetOrchestrationHistoryRequest) GetLastItemEventHash() []byte {
	if x != nil {
		return x.LastItemEventHash
	}
	return nil
}

// Response for GetOrchestrationHistory.
type GetOrchestrationHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of history events.
	// The list may start with an event with sequence number greater than 0 if the request contained a last_item that matched an item in the history stack.
	Events      []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	IsRestarted bool     `protobuf:"varint,2,opt,name=is_restarted,json=isRestarted,proto3" json:"is_restarted,omitempty"`
}

func (x *GetOrchestrationHistoryResponse) Reset() {
	*x = GetOrchestrationHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrchestrationHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrchestrationHistoryResponse) ProtoMessage() {}

func (x *GetOrchestrationHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrchestrationHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetOrchestrationHistoryResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{15}
}

func (x *GetOrchestrationHistoryResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetOrchestrationHistoryResponse) GetIsRestarted() bool {
	if x != nil {
		return x.IsRestarted
	}
	return false
}

// Supported orchestrator function type
type EstablishWorkerConnectionMessage_OrchestratorFunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the orchestration.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration (free-form).
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Maximum number of work items concurrently active on a worker for a given orchestration
	// A value of 0 means no limit
	ConcurrentLimit uint32 `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) Reset() {
	*x = EstablishWorkerConnectionMessage_OrchestratorFunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishWorkerConnectionMessage_OrchestratorFunctionType) ProtoMessage() {}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishWorkerConnectionMessage_OrchestratorFunctionType.ProtoReflect.Descriptor instead.
func (*EstablishWorkerConnectionMessage_OrchestratorFunctionType) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EstablishWorkerConnectionMessage_OrchestratorFunctionType) GetConcurrentLimit() uint32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

// Supported activity function type
type EstablishWorkerConnectionMessage_ActivityFunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the activity function.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of work items concurrently active on a worker for a given activity function
	// A value of 0 means no limit
	ConcurrentLimit uint32 `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
}

func (x *EstablishWorkerConnectionMessage_ActivityFunctionType) Reset() {
	*x = EstablishWorkerConnectionMessage_ActivityFunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishWorkerConnectionMessage_ActivityFunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishWorkerConnectionMessage_ActivityFunctionType) ProtoMessage() {}

func (x *EstablishWorkerConnectionMessage_ActivityFunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishWorkerConnectionMessage_ActivityFunctionType.ProtoReflect.Descriptor instead.
func (*EstablishWorkerConnectionMessage_ActivityFunctionType) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{3, 1}
}

func (x *EstablishWorkerConnectionMessage_ActivityFunctionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EstablishWorkerConnectionMessage_ActivityFunctionType) GetConcurrentLimit() uint32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

var File_backend_v1_worker_proto protoreflect.FileDescriptor

var file_backend_v1_worker_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x73, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x20,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x7f, 0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x73, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x18, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x55, 0x0a, 0x14, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22,
	0xbb, 0x01, 0x0a, 0x16, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x47, 0x0a,
	0x0e, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x03, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x12, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x67, 0x0a, 0x17, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x74, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x32, 0x92, 0x03, 0x0a, 0x0d,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x2b, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x61, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x64, 0x74, 0x6d, 0x62, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0xaa, 0x02, 0x26, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x44, 0x54, 0x4d, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_worker_proto_rawDescOnce sync.Once
	file_backend_v1_worker_proto_rawDescData = file_backend_v1_worker_proto_rawDesc
)

func file_backend_v1_worker_proto_rawDescGZIP() []byte {
	file_backend_v1_worker_proto_rawDescOnce.Do(func() {
		file_backend_v1_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_worker_proto_rawDescData)
	})
	return file_backend_v1_worker_proto_rawDescData
}

var file_backend_v1_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_backend_v1_worker_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                                               // 0: dtmb.backend.v1.PingRequest
	(*PingResponse)(nil),                                              // 1: dtmb.backend.v1.PingResponse
	(*ConnectWorkerClientMessage)(nil),                                // 2: dtmb.backend.v1.ConnectWorkerClientMessage
	(*EstablishWorkerConnectionMessage)(nil),                          // 3: dtmb.backend.v1.EstablishWorkerConnectionMessage
	(*CompleteOrchestrationMessage)(nil),                              // 4: dtmb.backend.v1.CompleteOrchestrationMessage
	(*CompleteActivityMessage)(nil),                                   // 5: dtmb.backend.v1.CompleteActivityMessage
	(*AbandonOrchestrationMessage)(nil),                               // 6: dtmb.backend.v1.AbandonOrchestrationMessage
	(*AbandonActivityMessage)(nil),                                    // 7: dtmb.backend.v1.AbandonActivityMessage
	(*BackOffMessage)(nil),                                            // 8: dtmb.backend.v1.BackOffMessage
	(*ConnectWorkerServerMessage)(nil),                                // 9: dtmb.backend.v1.ConnectWorkerServerMessage
	(*WorkerConfiguration)(nil),                                       // 10: dtmb.backend.v1.WorkerConfiguration
	(*ExecuteOrchestrationMessage)(nil),                               // 11: dtmb.backend.v1.ExecuteOrchestrationMessage
	(*ExecuteActivityMessage)(nil),                                    // 12: dtmb.backend.v1.ExecuteActivityMessage
	(*AbandonWorkItemsMessage)(nil),                                   // 13: dtmb.backend.v1.AbandonWorkItemsMessage
	(*GetOrchestrationHistoryRequest)(nil),                            // 14: dtmb.backend.v1.GetOrchestrationHistoryRequest
	(*GetOrchestrationHistoryResponse)(nil),                           // 15: dtmb.backend.v1.GetOrchestrationHistoryResponse
	(*EstablishWorkerConnectionMessage_OrchestratorFunctionType)(nil), // 16: dtmb.backend.v1.EstablishWorkerConnectionMessage.OrchestratorFunctionType
	(*EstablishWorkerConnectionMessage_ActivityFunctionType)(nil),     // 17: dtmb.backend.v1.EstablishWorkerConnectionMessage.ActivityFunctionType
	(*OrchestratorAction)(nil),                                        // 18: dtmb.backend.v1.OrchestratorAction
	(*FailureDetails)(nil),                                            // 19: dtmb.backend.v1.FailureDetails
	(*Delay)(nil),                                                     // 20: dtmb.backend.v1.Delay
	(*durationpb.Duration)(nil),                                       // 21: google.protobuf.Duration
	(*Event)(nil),                                                     // 22: dtmb.backend.v1.Event
	(*MetadataRequest)(nil),                                           // 23: dtmb.backend.v1.MetadataRequest
	(*MetadataResponse)(nil),                                          // 24: dtmb.backend.v1.MetadataResponse
}
var file_backend_v1_worker_proto_depIdxs = []int32{
	3,  // 0: dtmb.backend.v1.ConnectWorkerClientMessage.establish_worker_connection:type_name -> dtmb.backend.v1.EstablishWorkerConnectionMessage
	4,  // 1: dtmb.backend.v1.ConnectWorkerClientMessage.complete_orchestration:type_name -> dtmb.backend.v1.CompleteOrchestrationMessage
	5,  // 2: dtmb.backend.v1.ConnectWorkerClientMessage.complete_activity:type_name -> dtmb.backend.v1.CompleteActivityMessage
	6,  // 3: dtmb.backend.v1.ConnectWorkerClientMessage.abandon_orchestration:type_name -> dtmb.backend.v1.AbandonOrchestrationMessage
	7,  // 4: dtmb.backend.v1.ConnectWorkerClientMessage.abandon_activity:type_name -> dtmb.backend.v1.AbandonActivityMessage
	8,  // 5: dtmb.backend.v1.ConnectWorkerClientMessage.back_off:type_name -> dtmb.backend.v1.BackOffMessage
	16, // 6: dtmb.backend.v1.EstablishWorkerConnectionMessage.orchestrator_function:type_name -> dtmb.backend.v1.EstablishWorkerConnectionMessage.OrchestratorFunctionType
	17, // 7: dtmb.backend.v1.EstablishWorkerConnectionMessage.activity_function:type_name -> dtmb.backend.v1.EstablishWorkerConnectionMessage.ActivityFunctionType
	18, // 8: dtmb.backend.v1.CompleteOrchestrationMessage.actions:type_name -> dtmb.backend.v1.OrchestratorAction
	19, // 9: dtmb.backend.v1.CompleteActivityMessage.failure_details:type_name -> dtmb.backend.v1.FailureDetails
	20, // 10: dtmb.backend.v1.AbandonOrchestrationMessage.retry_delay:type_name -> dtmb.backend.v1.Delay
	20, // 11: dtmb.backend.v1.AbandonActivityMessage.retry_delay:type_name -> dtmb.backend.v1.Delay
	21, // 12: dtmb.backend.v1.BackOffMessage.duration:type_name -> google.protobuf.Duration
	10, // 13: dtmb.backend.v1.ConnectWorkerServerMessage.worker_configuration:type_name -> dtmb.backend.v1.WorkerConfiguration
	13, // 14: dtmb.backend.v1.ConnectWorkerServerMessage.abandon_work_items:type_name -> dtmb.backend.v1.AbandonWorkItemsMessage
	11, // 15: dtmb.backend.v1.ConnectWorkerServerMessage.execute_orchestration:type_name -> dtmb.backend.v1.ExecuteOrchestrationMessage
	12, // 16: dtmb.backend.v1.ConnectWorkerServerMessage.execute_activity:type_name -> dtmb.backend.v1.ExecuteActivityMessage
	21, // 17: dtmb.backend.v1.WorkerConfiguration.health_check_interval:type_name -> google.protobuf.Duration
	22, // 18: dtmb.backend.v1.ExecuteOrchestrationMessage.new_events:type_name -> dtmb.backend.v1.Event
	22, // 19: dtmb.backend.v1.GetOrchestrationHistoryResponse.events:type_name -> dtmb.backend.v1.Event
	0,  // 20: dtmb.backend.v1.TaskHubWorker.Ping:input_type -> dtmb.backend.v1.PingRequest
	23, // 21: dtmb.backend.v1.TaskHubWorker.Metadata:input_type -> dtmb.backend.v1.MetadataRequest
	2,  // 22: dtmb.backend.v1.TaskHubWorker.ConnectWorker:input_type -> dtmb.backend.v1.ConnectWorkerClientMessage
	14, // 23: dtmb.backend.v1.TaskHubWorker.GetOrchestrationHistory:input_type -> dtmb.backend.v1.GetOrchestrationHistoryRequest
	1,  // 24: dtmb.backend.v1.TaskHubWorker.Ping:output_type -> dtmb.backend.v1.PingResponse
	24, // 25: dtmb.backend.v1.TaskHubWorker.Metadata:output_type -> dtmb.backend.v1.MetadataResponse
	9,  // 26: dtmb.backend.v1.TaskHubWorker.ConnectWorker:output_type -> dtmb.backend.v1.ConnectWorkerServerMessage
	15, // 27: dtmb.backend.v1.TaskHubWorker.GetOrchestrationHistory:output_type -> dtmb.backend.v1.GetOrchestrationHistoryResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_backend_v1_worker_proto_init() }
func file_backend_v1_worker_proto_init() {
	if File_backend_v1_worker_proto != nil {
		return
	}
	file_backend_v1_common_proto_init()
	file_backend_v1_events_proto_init()
	file_backend_v1_orchestrator_actions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishWorkerConnectionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteOrchestrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteActivityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonOrchestrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonActivityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackOffMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteOrchestrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteActivityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrchestrationHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrchestrationHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishWorkerConnectionMessage_OrchestratorFunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishWorkerConnectionMessage_ActivityFunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_worker_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ConnectWorkerClientMessage_EstablishWorkerConnection)(nil),
		(*ConnectWorkerClientMessage_CompleteOrchestration)(nil),
		(*ConnectWorkerClientMessage_CompleteActivity)(nil),
		(*ConnectWorkerClientMessage_AbandonOrchestration)(nil),
		(*ConnectWorkerClientMessage_AbandonActivity)(nil),
		(*ConnectWorkerClientMessage_BackOff)(nil),
	}
	file_backend_v1_worker_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ConnectWorkerServerMessage_WorkerConfiguration)(nil),
		(*ConnectWorkerServerMessage_AbandonWorkItems)(nil),
		(*ConnectWorkerServerMessage_ExecuteOrchestration)(nil),
		(*ConnectWorkerServerMessage_ExecuteActivity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_v1_worker_proto_goTypes,
		DependencyIndexes: file_backend_v1_worker_proto_depIdxs,
		MessageInfos:      file_backend_v1_worker_proto_msgTypes,
	}.Build()
	File_backend_v1_worker_proto = out.File
	file_backend_v1_worker_proto_rawDesc = nil
	file_backend_v1_worker_proto_goTypes = nil
	file_backend_v1_worker_proto_depIdxs = nil
}
