syntax = "proto3";

package dtmb.backend.v1;

option go_package = "github.com/microsoft/dtmb-go/protos/backend/v1;backend";
option csharp_namespace = "Microsoft.DTMB.Backend.Autogen.Grpc.v1";

import "google/protobuf/timestamp.proto";
import "backend/v1/common.proto";

// Event in the inbox and history stack
message Event {
    int64 sequence_number = 1 [json_name = "sequenceNumber"];
    google.protobuf.Timestamp timestamp = 2;
    bytes event_hash = 3 [json_name = "eventHash"];
    oneof event_type {
        ExecutionStartedEvent execution_started = 100 [json_name = "executionStarted"];
        ExecutionCompletedEvent execution_completed = 101 [json_name = "executionCompleted"];
        ExecutionTerminatedEvent execution_terminated = 102 [json_name = "executionTerminated"];
        ActivityScheduledEvent activity_scheduled = 103 [json_name = "activityScheduled"];
        ActivityCompletedEvent activity_completed = 104 [json_name = "activityCompleted"];
        ActivityFailedEvent activity_failed = 105 [json_name = "activityFailed"];
        SubOrchestrationInstanceCreatedEvent sub_orchestration_instance_created = 106 [json_name = "subOrchestrationInstanceCreated"];
        SubOrchestrationInstanceCompletedEvent sub_orchestration_instance_completed = 107 [json_name = "subOrchestrationInstanceCompleted"];
        SubOrchestrationInstanceFailedEvent sub_orchestration_instance_failed = 108  [json_name = "subOrchestrationInstanceFailed"];
        TimerCreatedEvent timer_created = 109 [json_name = "timerCreated"];
        TimerExecutedEvent timer_executed = 110 [json_name = "timerExecuted"];
        OrchestratorStartedEvent orchestrator_started = 111 [json_name = "orchestratorStarted"];
        OrchestratorCompletedEvent orchestrator_completed = 112 [json_name = "orchestratorCompleted"];
        EventSentEvent event_sent = 113 [json_name = "eventSent"];
        EventRaisedEvent event_raised = 114 [json_name = "eventRaised"];
        GenericEvent generic_event = 115 [json_name = "genericEvent"];
        HistoryStateEvent history_state = 116 [json_name = "historyState"];
        ContinueAsNewEvent continue_as_new = 117 [json_name = "continueAsNew"];
        ExecutionSuspendedEvent execution_suspended = 118 [json_name = "executionSuspended"];
        ExecutionResumedEvent execution_resumed = 119 [json_name = "executionResumed"];
    }
}

// Event indicating the start of an orchestration execution for the first time
message ExecutionStartedEvent {
    // ID of the orchestration
    string orchestration_id = 1 [json_name = "orchestrationId"];
    // Unique ID of the execution, an autogenerated value
    string execution_id = 2 [json_name = "executionId"];
    // Name of the orchestration to start
    string name = 3;
    // Version of the orchestration to start
    string version = 4;
    // Input data
    bytes input = 5;
    // Time the orchestration was originally scheduled to be started at
    google.protobuf.Timestamp scheduled_time = 6 [json_name = "scheduledTime"];
    // Parent orchestration (optional)
    ParentInstanceInfo parent = 10;
    // Trace context (optional)
    TraceContext trace_context = 30 [json_name = "traceContext"];
}

// The orchestration has completed
// This event includes the output of the orchestration and doesn't distinguish between success or failure
message ExecutionCompletedEvent {
    OrchestrationStatus orchestration_status = 1 [json_name = "orchestrationStatus"];
    bytes result = 2;
    // Set on failed executions
    FailureDetails failure_details = 3 [json_name = "failureDetails"];
}

// The orchestration was forcefully terminated by an API call
message ExecutionTerminatedEvent {
    bytes reason = 1;
    bool non_recursive = 2 [json_name = "nonRecursive"];
}

// The orchestrator has scheduled an activity work item.
message ActivityScheduledEvent {
    string name = 1;
    //string version = 2;
    bytes input = 3;
    TraceContext parent_trace_context = 30 [json_name = "parentTraceContext"];
}

// A scheduled activity has completed successfully.
message ActivityCompletedEvent {
    // Sequence number of the event that scheduled this activity
    int64 related_sequence_number = 1 [json_name = "relatedSequenceNumber"];
    bytes result = 2;
}

// A scheduled activity has failed.
message ActivityFailedEvent {
    // Sequence number of the event that scheduled this activity
    int64 related_sequence_number = 1 [json_name = "relatedSequenceNumber"];
    bytes result = 2;
    FailureDetails failure_details = 3 [json_name = "failureDetails"];
}

// The orchestrator has scheduled a sub-orchestration.
message SubOrchestrationInstanceCreatedEvent {
    // ID of the sub-orchestration
    string orchestration_id = 1 [json_name = "orchestrationId"];
    // Unique ID of the sub-orchestration execution started
    string execution_id = 2 [json_name = "executionId"];
    // Name of the sub-orchestration started
    string name = 3;
    // Version of the sub-orchestration started (could be empty)
    string version = 4;
    // Input data (optional)
    bytes input = 10;
    // Trace context (optional)
    TraceContext parent_trace_context = 30 [json_name = "parentTraceContext"];
}

// A sub-orchestration has completed
message SubOrchestrationInstanceCompletedEvent {
    // Sequence number of the event that scheduled the sub-orchestration
    int64 related_sequence_number = 1 [json_name = "relatedSequenceNumber"];
    bytes result = 2;
}

// A sub-orchestration has failed
message SubOrchestrationInstanceFailedEvent {
    // Sequence number of the event that scheduled the sub-orchestration
    int64 related_sequence_number = 1 [json_name = "relatedSequenceNumber"];
    bytes result = 2;
    FailureDetails failure_details = 3 [json_name = "failureDetails"];
}

// The orchestrator scheduled a timer.
message TimerCreatedEvent {
    // Scheduled execution time for the timer
    Delay start_at = 1 [json_name = "startAt"];
}

// A previously-scheduled timer has executed.
message TimerExecutedEvent {
    // Sequence number of the event that scheduled this work item
    int64 related_sequence_number = 1 [json_name = "relatedSequenceNumber"];
}

// The orchestrator function is starting a new execution.
message OrchestratorStartedEvent {
    // Empty
}

// The orchestrator function has awaited and committed any side effects.
message OrchestratorCompletedEvent {
    // Empty
}

// An orchestration has sent a one-way message to another orchestration.
message EventSentEvent {
    // ID of the orchestration
    string orchestration_id = 1 [json_name = "orchestrationId"];
    // Event name
    string name = 2;
    // Optional payload of the event
    bytes input = 3;
}

// An orchestration has received an event message
message EventRaisedEvent {
    // Event name
    string name = 2;
    // Optional payload of the event
    bytes input = 3;
}

// A generic history event with a data field.
// This has no specific meaning in most implementations.
message GenericEvent {
    // Optional payload of the event
    bytes data = 1;
}

// A history event that contains a snapshot of the orchestration history.
// This isn't used by most implementations.
message HistoryStateEvent {
    OrchestrationStatus orchestration_status = 1 [json_name = "orchestrationStatus"];
}

// A history event for "continue as new" events
message ContinueAsNewEvent {
    // Optional payload of the event
    bytes input = 1;
}

// Suspsends the orchestration
message ExecutionSuspendedEvent {
    // Optional payload of the event
    bytes input = 1;
}

// Resumes the orchestration
// Note that suspended orchestrations are still considered to be "running" even though they will not process events.
message ExecutionResumedEvent {
    // Optional payload of the event
    bytes input = 1;
}
