// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: backend/v1/worker.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskHubWorkerClient is the client API for TaskHubWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHubWorkerClient interface {
	// Used to ping the service.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Gets information about the service.
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Opens a stream to receive work items from the task hub, including orchestration and activity work items.
	// This is a bi-directional stream also used by the worker to report work item completions and send health checks.
	ConnectWorker(ctx context.Context, opts ...grpc.CallOption) (TaskHubWorker_ConnectWorkerClient, error)
	// Retrieves the history of an orchestration from a given point.
	GetOrchestrationHistory(ctx context.Context, in *GetOrchestrationHistoryRequest, opts ...grpc.CallOption) (*GetOrchestrationHistoryResponse, error)
}

type taskHubWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHubWorkerClient(cc grpc.ClientConnInterface) TaskHubWorkerClient {
	return &taskHubWorkerClient{cc}
}

func (c *taskHubWorkerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubWorker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubWorkerClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubWorker/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubWorkerClient) ConnectWorker(ctx context.Context, opts ...grpc.CallOption) (TaskHubWorker_ConnectWorkerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskHubWorker_ServiceDesc.Streams[0], "/dtmb.backend.v1.TaskHubWorker/ConnectWorker", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskHubWorkerConnectWorkerClient{stream}
	return x, nil
}

type TaskHubWorker_ConnectWorkerClient interface {
	Send(*ConnectWorkerClientMessage) error
	Recv() (*ConnectWorkerServerMessage, error)
	grpc.ClientStream
}

type taskHubWorkerConnectWorkerClient struct {
	grpc.ClientStream
}

func (x *taskHubWorkerConnectWorkerClient) Send(m *ConnectWorkerClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskHubWorkerConnectWorkerClient) Recv() (*ConnectWorkerServerMessage, error) {
	m := new(ConnectWorkerServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskHubWorkerClient) GetOrchestrationHistory(ctx context.Context, in *GetOrchestrationHistoryRequest, opts ...grpc.CallOption) (*GetOrchestrationHistoryResponse, error) {
	out := new(GetOrchestrationHistoryResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubWorker/GetOrchestrationHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHubWorkerServer is the server API for TaskHubWorker service.
// All implementations must embed UnimplementedTaskHubWorkerServer
// for forward compatibility
type TaskHubWorkerServer interface {
	// Used to ping the service.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Gets information about the service.
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Opens a stream to receive work items from the task hub, including orchestration and activity work items.
	// This is a bi-directional stream also used by the worker to report work item completions and send health checks.
	ConnectWorker(TaskHubWorker_ConnectWorkerServer) error
	// Retrieves the history of an orchestration from a given point.
	GetOrchestrationHistory(context.Context, *GetOrchestrationHistoryRequest) (*GetOrchestrationHistoryResponse, error)
	mustEmbedUnimplementedTaskHubWorkerServer()
}

// UnimplementedTaskHubWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskHubWorkerServer struct {
}

func (UnimplementedTaskHubWorkerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTaskHubWorkerServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedTaskHubWorkerServer) ConnectWorker(TaskHubWorker_ConnectWorkerServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectWorker not implemented")
}
func (UnimplementedTaskHubWorkerServer) GetOrchestrationHistory(context.Context, *GetOrchestrationHistoryRequest) (*GetOrchestrationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestrationHistory not implemented")
}
func (UnimplementedTaskHubWorkerServer) mustEmbedUnimplementedTaskHubWorkerServer() {}

// UnsafeTaskHubWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHubWorkerServer will
// result in compilation errors.
type UnsafeTaskHubWorkerServer interface {
	mustEmbedUnimplementedTaskHubWorkerServer()
}

func RegisterTaskHubWorkerServer(s grpc.ServiceRegistrar, srv TaskHubWorkerServer) {
	s.RegisterService(&TaskHubWorker_ServiceDesc, srv)
}

func _TaskHubWorker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubWorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubWorker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubWorkerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubWorker_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubWorkerServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubWorker/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubWorkerServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubWorker_ConnectWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskHubWorkerServer).ConnectWorker(&taskHubWorkerConnectWorkerServer{stream})
}

type TaskHubWorker_ConnectWorkerServer interface {
	Send(*ConnectWorkerServerMessage) error
	Recv() (*ConnectWorkerClientMessage, error)
	grpc.ServerStream
}

type taskHubWorkerConnectWorkerServer struct {
	grpc.ServerStream
}

func (x *taskHubWorkerConnectWorkerServer) Send(m *ConnectWorkerServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskHubWorkerConnectWorkerServer) Recv() (*ConnectWorkerClientMessage, error) {
	m := new(ConnectWorkerClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskHubWorker_GetOrchestrationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrchestrationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubWorkerServer).GetOrchestrationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubWorker/GetOrchestrationHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubWorkerServer).GetOrchestrationHistory(ctx, req.(*GetOrchestrationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHubWorker_ServiceDesc is the grpc.ServiceDesc for TaskHubWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHubWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtmb.backend.v1.TaskHubWorker",
	HandlerType: (*TaskHubWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TaskHubWorker_Ping_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _TaskHubWorker_Metadata_Handler,
		},
		{
			MethodName: "GetOrchestrationHistory",
			Handler:    _TaskHubWorker_GetOrchestrationHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectWorker",
			Handler:       _TaskHubWorker_ConnectWorker_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "backend/v1/worker.proto",
}
