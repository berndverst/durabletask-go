// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: backend/v1/client.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskHubClientClient is the client API for TaskHubClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHubClientClient interface {
	// Gets information about the service.
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Creates a new orchestration instance.
	CreateOrchestration(ctx context.Context, in *CreateOrchestrationRequest, opts ...grpc.CallOption) (*CreateOrchestrationResponse, error)
	// Raises an event to a running orchestration instance that's waiting on a signal.
	RaiseEvent(ctx context.Context, in *RaiseEventRequest, opts ...grpc.CallOption) (*RaiseEventResponse, error)
	// Retrieves the state of the specified orchestration.
	// The caller specifies options such as whether to include inputs, outputs, and/or the full history.
	GetOrchestration(ctx context.Context, in *GetOrchestrationRequest, opts ...grpc.CallOption) (*GetOrchestrationResponse, error)
	// Deletes the runtime state of the specified orchestration.
	PurgeOrchestration(ctx context.Context, in *PurgeOrchestrationRequest, opts ...grpc.CallOption) (*PurgeOrchestrationResponse, error)
}

type taskHubClientClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHubClientClient(cc grpc.ClientConnInterface) TaskHubClientClient {
	return &taskHubClientClient{cc}
}

func (c *taskHubClientClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubClient/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubClientClient) CreateOrchestration(ctx context.Context, in *CreateOrchestrationRequest, opts ...grpc.CallOption) (*CreateOrchestrationResponse, error) {
	out := new(CreateOrchestrationResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubClient/CreateOrchestration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubClientClient) RaiseEvent(ctx context.Context, in *RaiseEventRequest, opts ...grpc.CallOption) (*RaiseEventResponse, error) {
	out := new(RaiseEventResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubClient/RaiseEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubClientClient) GetOrchestration(ctx context.Context, in *GetOrchestrationRequest, opts ...grpc.CallOption) (*GetOrchestrationResponse, error) {
	out := new(GetOrchestrationResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubClient/GetOrchestration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubClientClient) PurgeOrchestration(ctx context.Context, in *PurgeOrchestrationRequest, opts ...grpc.CallOption) (*PurgeOrchestrationResponse, error) {
	out := new(PurgeOrchestrationResponse)
	err := c.cc.Invoke(ctx, "/dtmb.backend.v1.TaskHubClient/PurgeOrchestration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHubClientServer is the server API for TaskHubClient service.
// All implementations must embed UnimplementedTaskHubClientServer
// for forward compatibility
type TaskHubClientServer interface {
	// Gets information about the service.
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Creates a new orchestration instance.
	CreateOrchestration(context.Context, *CreateOrchestrationRequest) (*CreateOrchestrationResponse, error)
	// Raises an event to a running orchestration instance that's waiting on a signal.
	RaiseEvent(context.Context, *RaiseEventRequest) (*RaiseEventResponse, error)
	// Retrieves the state of the specified orchestration.
	// The caller specifies options such as whether to include inputs, outputs, and/or the full history.
	GetOrchestration(context.Context, *GetOrchestrationRequest) (*GetOrchestrationResponse, error)
	// Deletes the runtime state of the specified orchestration.
	PurgeOrchestration(context.Context, *PurgeOrchestrationRequest) (*PurgeOrchestrationResponse, error)
	mustEmbedUnimplementedTaskHubClientServer()
}

// UnimplementedTaskHubClientServer must be embedded to have forward compatible implementations.
type UnimplementedTaskHubClientServer struct {
}

func (UnimplementedTaskHubClientServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedTaskHubClientServer) CreateOrchestration(context.Context, *CreateOrchestrationRequest) (*CreateOrchestrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrchestration not implemented")
}
func (UnimplementedTaskHubClientServer) RaiseEvent(context.Context, *RaiseEventRequest) (*RaiseEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseEvent not implemented")
}
func (UnimplementedTaskHubClientServer) GetOrchestration(context.Context, *GetOrchestrationRequest) (*GetOrchestrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestration not implemented")
}
func (UnimplementedTaskHubClientServer) PurgeOrchestration(context.Context, *PurgeOrchestrationRequest) (*PurgeOrchestrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeOrchestration not implemented")
}
func (UnimplementedTaskHubClientServer) mustEmbedUnimplementedTaskHubClientServer() {}

// UnsafeTaskHubClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHubClientServer will
// result in compilation errors.
type UnsafeTaskHubClientServer interface {
	mustEmbedUnimplementedTaskHubClientServer()
}

func RegisterTaskHubClientServer(s grpc.ServiceRegistrar, srv TaskHubClientServer) {
	s.RegisterService(&TaskHubClient_ServiceDesc, srv)
}

func _TaskHubClient_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubClientServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubClient/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubClientServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubClient_CreateOrchestration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrchestrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubClientServer).CreateOrchestration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubClient/CreateOrchestration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubClientServer).CreateOrchestration(ctx, req.(*CreateOrchestrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubClient_RaiseEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubClientServer).RaiseEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubClient/RaiseEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubClientServer).RaiseEvent(ctx, req.(*RaiseEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubClient_GetOrchestration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrchestrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubClientServer).GetOrchestration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubClient/GetOrchestration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubClientServer).GetOrchestration(ctx, req.(*GetOrchestrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubClient_PurgeOrchestration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeOrchestrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubClientServer).PurgeOrchestration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtmb.backend.v1.TaskHubClient/PurgeOrchestration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubClientServer).PurgeOrchestration(ctx, req.(*PurgeOrchestrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHubClient_ServiceDesc is the grpc.ServiceDesc for TaskHubClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHubClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtmb.backend.v1.TaskHubClient",
	HandlerType: (*TaskHubClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _TaskHubClient_Metadata_Handler,
		},
		{
			MethodName: "CreateOrchestration",
			Handler:    _TaskHubClient_CreateOrchestration_Handler,
		},
		{
			MethodName: "RaiseEvent",
			Handler:    _TaskHubClient_RaiseEvent_Handler,
		},
		{
			MethodName: "GetOrchestration",
			Handler:    _TaskHubClient_GetOrchestration_Handler,
		},
		{
			MethodName: "PurgeOrchestration",
			Handler:    _TaskHubClient_PurgeOrchestration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/v1/client.proto",
}
