syntax = "proto3";

package dtmb.backend.v1;

option go_package = "github.com/microsoft/dtmb-go/protos/backend/v1;backend";
option csharp_namespace = "Microsoft.DTMB.Backend.Autogen.Grpc.v1";

import "google/protobuf/duration.proto";
import "backend/v1/common.proto";
import "backend/v1/events.proto";
import "backend/v1/actions.proto";

// Worker operations.
service TaskHubWorker {
    // Used to report health information.
    rpc Ping (PingRequest) returns (PingResponse);

    // Gets information about the service.
    rpc Metadata (MetadataRequest) returns (MetadataResponse);

    // Opens a stream to receive work items from the task hub, including orchestration and activity work items
    rpc ConnectWorker (ConnectWorkerRequest) returns (stream ConnectWorkerMessage);

    // Retrieves the history of an orchestration from a given point.
    rpc GetOrchestrationHistory (GetOrchestrationHistoryRequest) returns (GetOrchestrationHistoryResponse);

    // Completes a work item.
    rpc CompleteWorkItem (CompleteWorkItemRequest) returns (CompleteWorkItemResponse);

    // Abandons a work item.
    rpc AbandonWorkItem (AbandonWorkItemRequest) returns (AbandonWorkItemResponse);

    // Requests the service to pause sending more work for the specified amount of time.
    rpc BackOff (BackOffRequest) returns (BackOffResponse);
}

// Request for Ping.
message PingRequest {
    // Optional instance ID for pings.
    // This is sent by the service in the first message for ConnectWorker.
    string instance_id = 1 [json_name = "instanceId"];
}

// Response for Ping.
message PingResponse {
    // Empty
}

// Request for ConnectWorker.
// Includes information about the current worker's capabilities
message ConnectWorkerRequest {
    // Version of the SDK used by the worker.
    string version = 1;
    // Maximum number of work items concurrently active on a worker across all types.
    // A value of 0 means no limit
    uint32 concurrent_limit = 10 [json_name = "concurrentLimit"];
    // List of supported orchestraror functions.
    repeated OrchestratorFunctionType orchestrator_function = 20 [json_name = "orchestratorFunction"];
    // List of supported activity functions.
    repeated ActivityFunctionType activity_function = 21 [json_name = "activityFunction"];

    // Supported orchestrator function type
    message OrchestratorFunctionType {
        // Name of the orchestration.
        string orchestration_name = 1 [json_name = "orchestrationName"];
        // Version of the orchestration (free-form).
        string orchestration_version = 2 [json_name = "orchestrationVersion"];
        // Maximum number of work items concurrently active on a worker for a given orchestration
        // A value of 0 means no limit
        uint32 concurrent_limit = 10 [json_name = "concurrentLimit"];
    }

    // Supported activity function type
    message ActivityFunctionType {
        // Name of the activity function.
        string activity_name = 3 [json_name = "activityName"];
        // Maximum number of work items concurrently active on a worker for a given activity function
        // A value of 0 means no limit
        uint32 concurrent_limit = 10 [json_name = "concurrentLimit"];
    }
}

// Message sent by the server in the ConnectWorker stream.
message ConnectWorkerMessage {
    // Message to include.
    // This is optional, and no message indicates a simple ping.
    oneof message {
        // Send certain configuration options for the worker.
        // This is sent once, and only once, in response to the first message from the worker on ConnectWorker.
        // Clients should expect to receive this message within the first seconds of the ConnectWorker stream being established, and should cancel the stream if they don't receive in that time frame (or if they receive a different message before the WorkerConfiguration one).
        WorkerConfiguration worker_configuration = 1 [json_name = "workerConfiguration"];
        // Request the worker to abandon work items related to an orchestration.
        AbandonWorkItemsMessage abandon_work_items = 2 [json_name = "abandonWorkItems"];
        // Start the execution of an orchestration work item.
        ExecuteOrchestrationMessage execute_orchestration = 10 [json_name = "executeOrchestration"];
        // Start the execution of an activity work item.
        ExecuteActivityMessage execute_activity = 11 [json_name = "executeActivity"];
    }
}

// WorkerConfiguration is one of the messages that can be sent by the server over ConnectWorker.
// It contains certain configuration options for the worker.
// This is normally sent in response to the first message from the worker on ConnectWorker, but can be sent as update at any time.
message WorkerConfiguration {
    // ID of the connected instance
    string instance_id = 1 [json_name = "instanceId"];
    // Maximum interval for the worker to send pings to the service.
    google.protobuf.Duration health_check_interval = 2 [json_name = "healthCheckInterval"];
}

// ExecuteOrchestrationMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an orchestration work item to execute.
message ExecuteOrchestrationMessage {
    // The unique ID of the orchestration instance.
    OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
    // Name of the orchestration.
    string name = 3;
    // Version of the orchestration.
    string version = 4;
    // Completion token.
    string completion_token = 5 [json_name = "completionToken"];
    // Orchestration input data (optional).
    bytes input = 10;
    // Retry count.
    uint32 retry_count = 20 [json_name = "retryCount"];
}

// ExecuteActivityMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an activity work item to execute.
message ExecuteActivityMessage {
    // The unique ID of the orchestration instance.
    OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
    // Sequence number
    uint64 sequence_number = 2 [json_name = "sequenceNumber"];
    // Name of the orchestration.
    string name = 3;
    // Version of the activity.
    string version = 4;
    // Completion token.
    string completion_token = 5 [json_name = "completionToken"];
    // Activity input data (optional).
    bytes input = 10;
}

// AbandonWorkItemsMessage is one of the messages that can be sent by the server over ConnectWorker.
// It requests to abandon any work item related to an orchestration.
message AbandonWorkItemsMessage {
    // The unique ID of the orchestration instance.
    OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
}

// Request for GetOrchestrationHistory.
message GetOrchestrationHistoryRequest {
    // The unique ID of the orchestration instance.
    OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
    // Hash of the last item in the history stack that is cached on the worker.
    // If this is empty, returns the entire history.
    bytes last_item = 2 [json_name = "lastItem"];
}

// Response for GetOrchestrationHistory.
message GetOrchestrationHistoryResponse {
    // List of history events.
    // The list may start with an event with sequence number greater than 0 if the request contained a last_item that matched an item in the history stack.
    repeated Event event = 1;
}

// Request for CompleteWorkItem.
message CompleteWorkItemRequest {
    oneof work_item {
        CompleteOrchestrationRequest orchestration = 1;
        CompleteActivityRequest activity = 2;
    }

    message CompleteOrchestrationRequest {
        // The unique ID of the orchestration instance.
        OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
        // Completion token sent in the ExecuteOrchestrationMessage.
        string completion_token = 3 [json_name = "completionToken"];
        // Actions to schedule.
        repeated OrchestratorAction actions = 4;
        // Custom status to update (optional).
        string custom_status = 5 [json_name = "customStatus"];
    }

    message CompleteActivityRequest {
        // The unique ID of the orchestration instance.
        OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
        // Sequence number
        uint64 sequence_number = 2 [json_name = "sequenceNumber"];
        // Completion token sent in the ExecuteActivityMessage
        string completion_token = 3 [json_name = "completionToken"];
        // Output payload (optional)
        bytes result = 4;
        TaskFailureDetails failure_details = 5 [json_name = "failureDetails"];
    }
}

// Response for CompleteWorkItem.
message CompleteWorkItemResponse {
    // Empty
}

// Request for AbandonWorkItemRequest.
message AbandonWorkItemRequest {
    oneof work_item {
        AbandonOrchestrationRequest orchestration = 1;
        AbandonActivityRequest activity = 2;
    }

    message AbandonOrchestrationRequest {
        // The unique ID of the orchestration instance.
        OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
        // Completion token sent in the ExecuteActivityMessage
        string completion_token = 3 [json_name = "completionToken"];
    }

    message AbandonActivityRequest {
        // The unique ID of the orchestration instance.
        OrchestrationID orchestration_id = 1 [json_name = "orchestrationId"];
        // Sequence number
        uint64 sequence_number = 2 [json_name = "sequenceNumber"];
        // Completion token sent in the ExecuteActivityMessage
        string completion_token = 3 [json_name = "completionToken"];
    }
}

// Response for AbandonWorkItemRequest.
message AbandonWorkItemResponse {
    // Empty
}

// Request for BackOff.
message BackOffRequest {
    // ID of the instance making the request.
    // This is sent by the service in the first message for ConnectWorker.
    string instance_id = 1 [json_name = "instanceId"];

    // Requested pause duration.
    // If negative or zero (empty), stops any back-off and allows the service to resume sending work items immediately.
    google.protobuf.Duration duration = 2;
}

// Response for BackOff.
message BackOffResponse {
    // Empty
}
