// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: backend/v1/events.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event in the inbox and history stack
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=seq,proto3" json:"sequence_number,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventHash      []byte                 `protobuf:"bytes,3,opt,name=event_hash,json=hash,proto3" json:"event_hash,omitempty"`
	// Types that are assignable to EventType:
	//
	//	*Event_ExecutionStarted
	//	*Event_ExecutionCompleted
	//	*Event_ExecutionTerminated
	//	*Event_TaskScheduled
	//	*Event_TaskCompleted
	//	*Event_TaskFailed
	//	*Event_SubOrchestrationInstanceCreated
	//	*Event_SubOrchestrationInstanceCompleted
	//	*Event_SubOrchestrationInstanceFailed
	//	*Event_TimerCreated
	//	*Event_TimerFired
	//	*Event_OrchestratorStarted
	//	*Event_OrchestratorCompleted
	//	*Event_EventSent
	//	*Event_EventRaised
	//	*Event_GenericEvent
	//	*Event_HistoryState
	//	*Event_ContinueAsNew
	//	*Event_ExecutionSuspended
	//	*Event_ExecutionResumed
	EventType isEvent_EventType `protobuf_oneof:"event_type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetEventHash() []byte {
	if x != nil {
		return x.EventHash
	}
	return nil
}

func (m *Event) GetEventType() isEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *Event) GetExecutionStarted() *ExecutionStartedEvent {
	if x, ok := x.GetEventType().(*Event_ExecutionStarted); ok {
		return x.ExecutionStarted
	}
	return nil
}

func (x *Event) GetExecutionCompleted() *ExecutionCompletedEvent {
	if x, ok := x.GetEventType().(*Event_ExecutionCompleted); ok {
		return x.ExecutionCompleted
	}
	return nil
}

func (x *Event) GetExecutionTerminated() *ExecutionTerminatedEvent {
	if x, ok := x.GetEventType().(*Event_ExecutionTerminated); ok {
		return x.ExecutionTerminated
	}
	return nil
}

func (x *Event) GetTaskScheduled() *TaskScheduledEvent {
	if x, ok := x.GetEventType().(*Event_TaskScheduled); ok {
		return x.TaskScheduled
	}
	return nil
}

func (x *Event) GetTaskCompleted() *TaskCompletedEvent {
	if x, ok := x.GetEventType().(*Event_TaskCompleted); ok {
		return x.TaskCompleted
	}
	return nil
}

func (x *Event) GetTaskFailed() *TaskFailedEvent {
	if x, ok := x.GetEventType().(*Event_TaskFailed); ok {
		return x.TaskFailed
	}
	return nil
}

func (x *Event) GetSubOrchestrationInstanceCreated() *SubOrchestrationInstanceCreatedEvent {
	if x, ok := x.GetEventType().(*Event_SubOrchestrationInstanceCreated); ok {
		return x.SubOrchestrationInstanceCreated
	}
	return nil
}

func (x *Event) GetSubOrchestrationInstanceCompleted() *SubOrchestrationInstanceCompletedEvent {
	if x, ok := x.GetEventType().(*Event_SubOrchestrationInstanceCompleted); ok {
		return x.SubOrchestrationInstanceCompleted
	}
	return nil
}

func (x *Event) GetSubOrchestrationInstanceFailed() *SubOrchestrationInstanceFailedEvent {
	if x, ok := x.GetEventType().(*Event_SubOrchestrationInstanceFailed); ok {
		return x.SubOrchestrationInstanceFailed
	}
	return nil
}

func (x *Event) GetTimerCreated() *TimerCreatedEvent {
	if x, ok := x.GetEventType().(*Event_TimerCreated); ok {
		return x.TimerCreated
	}
	return nil
}

func (x *Event) GetTimerFired() *TimerFiredEvent {
	if x, ok := x.GetEventType().(*Event_TimerFired); ok {
		return x.TimerFired
	}
	return nil
}

func (x *Event) GetOrchestratorStarted() *OrchestratorStartedEvent {
	if x, ok := x.GetEventType().(*Event_OrchestratorStarted); ok {
		return x.OrchestratorStarted
	}
	return nil
}

func (x *Event) GetOrchestratorCompleted() *OrchestratorCompletedEvent {
	if x, ok := x.GetEventType().(*Event_OrchestratorCompleted); ok {
		return x.OrchestratorCompleted
	}
	return nil
}

func (x *Event) GetEventSent() *EventSentEvent {
	if x, ok := x.GetEventType().(*Event_EventSent); ok {
		return x.EventSent
	}
	return nil
}

func (x *Event) GetEventRaised() *EventRaisedEvent {
	if x, ok := x.GetEventType().(*Event_EventRaised); ok {
		return x.EventRaised
	}
	return nil
}

func (x *Event) GetGenericEvent() *GenericEvent {
	if x, ok := x.GetEventType().(*Event_GenericEvent); ok {
		return x.GenericEvent
	}
	return nil
}

func (x *Event) GetHistoryState() *HistoryStateEvent {
	if x, ok := x.GetEventType().(*Event_HistoryState); ok {
		return x.HistoryState
	}
	return nil
}

func (x *Event) GetContinueAsNew() *ContinueAsNewEvent {
	if x, ok := x.GetEventType().(*Event_ContinueAsNew); ok {
		return x.ContinueAsNew
	}
	return nil
}

func (x *Event) GetExecutionSuspended() *ExecutionSuspendedEvent {
	if x, ok := x.GetEventType().(*Event_ExecutionSuspended); ok {
		return x.ExecutionSuspended
	}
	return nil
}

func (x *Event) GetExecutionResumed() *ExecutionResumedEvent {
	if x, ok := x.GetEventType().(*Event_ExecutionResumed); ok {
		return x.ExecutionResumed
	}
	return nil
}

type isEvent_EventType interface {
	isEvent_EventType()
}

type Event_ExecutionStarted struct {
	ExecutionStarted *ExecutionStartedEvent `protobuf:"bytes,100,opt,name=execution_started,json=executionStarted,proto3,oneof"`
}

type Event_ExecutionCompleted struct {
	ExecutionCompleted *ExecutionCompletedEvent `protobuf:"bytes,101,opt,name=execution_completed,json=executionCompleted,proto3,oneof"`
}

type Event_ExecutionTerminated struct {
	ExecutionTerminated *ExecutionTerminatedEvent `protobuf:"bytes,102,opt,name=execution_terminated,json=executionTerminated,proto3,oneof"`
}

type Event_TaskScheduled struct {
	TaskScheduled *TaskScheduledEvent `protobuf:"bytes,103,opt,name=task_scheduled,json=taskScheduled,proto3,oneof"`
}

type Event_TaskCompleted struct {
	TaskCompleted *TaskCompletedEvent `protobuf:"bytes,104,opt,name=task_completed,json=taskCompleted,proto3,oneof"`
}

type Event_TaskFailed struct {
	TaskFailed *TaskFailedEvent `protobuf:"bytes,105,opt,name=task_failed,json=taskFailed,proto3,oneof"`
}

type Event_SubOrchestrationInstanceCreated struct {
	SubOrchestrationInstanceCreated *SubOrchestrationInstanceCreatedEvent `protobuf:"bytes,106,opt,name=sub_orchestration_instance_created,json=subOrchestrationInstanceCreated,proto3,oneof"`
}

type Event_SubOrchestrationInstanceCompleted struct {
	SubOrchestrationInstanceCompleted *SubOrchestrationInstanceCompletedEvent `protobuf:"bytes,107,opt,name=sub_orchestration_instance_completed,json=subOrchestrationInstanceCompleted,proto3,oneof"`
}

type Event_SubOrchestrationInstanceFailed struct {
	SubOrchestrationInstanceFailed *SubOrchestrationInstanceFailedEvent `protobuf:"bytes,108,opt,name=sub_orchestration_instance_failed,json=subOrchestrationInstanceFailed,proto3,oneof"`
}

type Event_TimerCreated struct {
	TimerCreated *TimerCreatedEvent `protobuf:"bytes,109,opt,name=timer_created,json=timerCreated,proto3,oneof"`
}

type Event_TimerFired struct {
	TimerFired *TimerFiredEvent `protobuf:"bytes,110,opt,name=timer_fired,json=timerFired,proto3,oneof"`
}

type Event_OrchestratorStarted struct {
	OrchestratorStarted *OrchestratorStartedEvent `protobuf:"bytes,111,opt,name=orchestrator_started,json=orchestratorStarted,proto3,oneof"`
}

type Event_OrchestratorCompleted struct {
	OrchestratorCompleted *OrchestratorCompletedEvent `protobuf:"bytes,112,opt,name=orchestrator_completed,json=orchestratorCompleted,proto3,oneof"`
}

type Event_EventSent struct {
	EventSent *EventSentEvent `protobuf:"bytes,113,opt,name=event_sent,json=eventSent,proto3,oneof"`
}

type Event_EventRaised struct {
	EventRaised *EventRaisedEvent `protobuf:"bytes,114,opt,name=event_raised,json=eventRaised,proto3,oneof"`
}

type Event_GenericEvent struct {
	GenericEvent *GenericEvent `protobuf:"bytes,115,opt,name=generic_event,json=genericEvent,proto3,oneof"`
}

type Event_HistoryState struct {
	HistoryState *HistoryStateEvent `protobuf:"bytes,116,opt,name=history_state,json=historyState,proto3,oneof"`
}

type Event_ContinueAsNew struct {
	ContinueAsNew *ContinueAsNewEvent `protobuf:"bytes,117,opt,name=continue_as_new,json=continueAsNew,proto3,oneof"`
}

type Event_ExecutionSuspended struct {
	ExecutionSuspended *ExecutionSuspendedEvent `protobuf:"bytes,118,opt,name=execution_suspended,json=executionSuspended,proto3,oneof"`
}

type Event_ExecutionResumed struct {
	ExecutionResumed *ExecutionResumedEvent `protobuf:"bytes,119,opt,name=execution_resumed,json=executionResumed,proto3,oneof"`
}

func (*Event_ExecutionStarted) isEvent_EventType() {}

func (*Event_ExecutionCompleted) isEvent_EventType() {}

func (*Event_ExecutionTerminated) isEvent_EventType() {}

func (*Event_TaskScheduled) isEvent_EventType() {}

func (*Event_TaskCompleted) isEvent_EventType() {}

func (*Event_TaskFailed) isEvent_EventType() {}

func (*Event_SubOrchestrationInstanceCreated) isEvent_EventType() {}

func (*Event_SubOrchestrationInstanceCompleted) isEvent_EventType() {}

func (*Event_SubOrchestrationInstanceFailed) isEvent_EventType() {}

func (*Event_TimerCreated) isEvent_EventType() {}

func (*Event_TimerFired) isEvent_EventType() {}

func (*Event_OrchestratorStarted) isEvent_EventType() {}

func (*Event_OrchestratorCompleted) isEvent_EventType() {}

func (*Event_EventSent) isEvent_EventType() {}

func (*Event_EventRaised) isEvent_EventType() {}

func (*Event_GenericEvent) isEvent_EventType() {}

func (*Event_HistoryState) isEvent_EventType() {}

func (*Event_ContinueAsNew) isEvent_EventType() {}

func (*Event_ExecutionSuspended) isEvent_EventType() {}

func (*Event_ExecutionResumed) isEvent_EventType() {}

type ExecutionStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the orchestration
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the orchestration to start
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration to start
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Input data
	Input []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// Time the orchestration was scheduled at
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// Parent orchestration (optional)
	Parent *ExecutionStartedEvent_ParentInstanceInfo `protobuf:"bytes,10,opt,name=parent,proto3" json:"parent,omitempty"`
	// Trace context (optional)
	TraceContext *TraceContext `protobuf:"bytes,20,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *ExecutionStartedEvent) Reset() {
	*x = ExecutionStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStartedEvent) ProtoMessage() {}

func (x *ExecutionStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStartedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionStartedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionStartedEvent) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *ExecutionStartedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutionStartedEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExecutionStartedEvent) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecutionStartedEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *ExecutionStartedEvent) GetParent() *ExecutionStartedEvent_ParentInstanceInfo {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ExecutionStartedEvent) GetTraceContext() *TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type ExecutionCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionCompletedEvent) Reset() {
	*x = ExecutionCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionCompletedEvent) ProtoMessage() {}

func (x *ExecutionCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionCompletedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionCompletedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{2}
}

type ExecutionTerminatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionTerminatedEvent) Reset() {
	*x = ExecutionTerminatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTerminatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTerminatedEvent) ProtoMessage() {}

func (x *ExecutionTerminatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTerminatedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionTerminatedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{3}
}

type TaskScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskScheduledEvent) Reset() {
	*x = TaskScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskScheduledEvent) ProtoMessage() {}

func (x *TaskScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskScheduledEvent.ProtoReflect.Descriptor instead.
func (*TaskScheduledEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{4}
}

type TaskCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskCompletedEvent) Reset() {
	*x = TaskCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCompletedEvent) ProtoMessage() {}

func (x *TaskCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCompletedEvent.ProtoReflect.Descriptor instead.
func (*TaskCompletedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{5}
}

type TaskFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskFailedEvent) Reset() {
	*x = TaskFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedEvent) ProtoMessage() {}

func (x *TaskFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedEvent.ProtoReflect.Descriptor instead.
func (*TaskFailedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{6}
}

type SubOrchestrationInstanceCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubOrchestrationInstanceCreatedEvent) Reset() {
	*x = SubOrchestrationInstanceCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceCreatedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceCreatedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceCreatedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{7}
}

type SubOrchestrationInstanceCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubOrchestrationInstanceCompletedEvent) Reset() {
	*x = SubOrchestrationInstanceCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceCompletedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceCompletedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceCompletedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{8}
}

type SubOrchestrationInstanceFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubOrchestrationInstanceFailedEvent) Reset() {
	*x = SubOrchestrationInstanceFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrchestrationInstanceFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrchestrationInstanceFailedEvent) ProtoMessage() {}

func (x *SubOrchestrationInstanceFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrchestrationInstanceFailedEvent.ProtoReflect.Descriptor instead.
func (*SubOrchestrationInstanceFailedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{9}
}

type TimerCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimerCreatedEvent) Reset() {
	*x = TimerCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerCreatedEvent) ProtoMessage() {}

func (x *TimerCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerCreatedEvent.ProtoReflect.Descriptor instead.
func (*TimerCreatedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{10}
}

type TimerFiredEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimerFiredEvent) Reset() {
	*x = TimerFiredEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerFiredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerFiredEvent) ProtoMessage() {}

func (x *TimerFiredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerFiredEvent.ProtoReflect.Descriptor instead.
func (*TimerFiredEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{11}
}

type OrchestratorStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrchestratorStartedEvent) Reset() {
	*x = OrchestratorStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorStartedEvent) ProtoMessage() {}

func (x *OrchestratorStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorStartedEvent.ProtoReflect.Descriptor instead.
func (*OrchestratorStartedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{12}
}

type OrchestratorCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrchestratorCompletedEvent) Reset() {
	*x = OrchestratorCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorCompletedEvent) ProtoMessage() {}

func (x *OrchestratorCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorCompletedEvent.ProtoReflect.Descriptor instead.
func (*OrchestratorCompletedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{13}
}

type EventSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventSentEvent) Reset() {
	*x = EventSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSentEvent) ProtoMessage() {}

func (x *EventSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSentEvent.ProtoReflect.Descriptor instead.
func (*EventSentEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{14}
}

type EventRaisedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventRaisedEvent) Reset() {
	*x = EventRaisedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRaisedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRaisedEvent) ProtoMessage() {}

func (x *EventRaisedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRaisedEvent.ProtoReflect.Descriptor instead.
func (*EventRaisedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{15}
}

type GenericEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenericEvent) Reset() {
	*x = GenericEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericEvent) ProtoMessage() {}

func (x *GenericEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericEvent.ProtoReflect.Descriptor instead.
func (*GenericEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{16}
}

type HistoryStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoryStateEvent) Reset() {
	*x = HistoryStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryStateEvent) ProtoMessage() {}

func (x *HistoryStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryStateEvent.ProtoReflect.Descriptor instead.
func (*HistoryStateEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{17}
}

type ContinueAsNewEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContinueAsNewEvent) Reset() {
	*x = ContinueAsNewEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewEvent) ProtoMessage() {}

func (x *ContinueAsNewEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewEvent.ProtoReflect.Descriptor instead.
func (*ContinueAsNewEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{18}
}

type ExecutionSuspendedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionSuspendedEvent) Reset() {
	*x = ExecutionSuspendedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionSuspendedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSuspendedEvent) ProtoMessage() {}

func (x *ExecutionSuspendedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSuspendedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionSuspendedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{19}
}

type ExecutionResumedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutionResumedEvent) Reset() {
	*x = ExecutionResumedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionResumedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResumedEvent) ProtoMessage() {}

func (x *ExecutionResumedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResumedEvent.ProtoReflect.Descriptor instead.
func (*ExecutionResumedEvent) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{20}
}

type ExecutionStartedEvent_ParentInstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the parent orchestration
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// The ID of the parent's task responsible for creating this orchestration
	TaskId int32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Name of the orchestration
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration
	Version string `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) Reset() {
	*x = ExecutionStartedEvent_ParentInstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStartedEvent_ParentInstanceInfo) ProtoMessage() {}

func (x *ExecutionStartedEvent_ParentInstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStartedEvent_ParentInstanceInfo.ProtoReflect.Descriptor instead.
func (*ExecutionStartedEvent_ParentInstanceInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1_events_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutionStartedEvent_ParentInstanceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_backend_v1_events_proto protoreflect.FileDescriptor

var file_backend_v1_events_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x0f, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x55, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x74, 0x6d,
	0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x75, 0x62,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a,
	0x24, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x21, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x73, 0x75,
	0x62, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x73,
	0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x5e, 0x0a,
	0x14, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a,
	0x16, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x74, 0x6d,
	0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x5b, 0x0a,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x74, 0x6d,
	0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xad, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x19, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a,
	0x26, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x13,
	0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x10, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x64, 0x74,
	0x6d, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0xaa,
	0x02, 0x26, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x44, 0x54, 0x4d, 0x42,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_events_proto_rawDescOnce sync.Once
	file_backend_v1_events_proto_rawDescData = file_backend_v1_events_proto_rawDesc
)

func file_backend_v1_events_proto_rawDescGZIP() []byte {
	file_backend_v1_events_proto_rawDescOnce.Do(func() {
		file_backend_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_events_proto_rawDescData)
	})
	return file_backend_v1_events_proto_rawDescData
}

var file_backend_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_backend_v1_events_proto_goTypes = []interface{}{
	(*Event)(nil),                                    // 0: dtmb.backend.v1.Event
	(*ExecutionStartedEvent)(nil),                    // 1: dtmb.backend.v1.ExecutionStartedEvent
	(*ExecutionCompletedEvent)(nil),                  // 2: dtmb.backend.v1.ExecutionCompletedEvent
	(*ExecutionTerminatedEvent)(nil),                 // 3: dtmb.backend.v1.ExecutionTerminatedEvent
	(*TaskScheduledEvent)(nil),                       // 4: dtmb.backend.v1.TaskScheduledEvent
	(*TaskCompletedEvent)(nil),                       // 5: dtmb.backend.v1.TaskCompletedEvent
	(*TaskFailedEvent)(nil),                          // 6: dtmb.backend.v1.TaskFailedEvent
	(*SubOrchestrationInstanceCreatedEvent)(nil),     // 7: dtmb.backend.v1.SubOrchestrationInstanceCreatedEvent
	(*SubOrchestrationInstanceCompletedEvent)(nil),   // 8: dtmb.backend.v1.SubOrchestrationInstanceCompletedEvent
	(*SubOrchestrationInstanceFailedEvent)(nil),      // 9: dtmb.backend.v1.SubOrchestrationInstanceFailedEvent
	(*TimerCreatedEvent)(nil),                        // 10: dtmb.backend.v1.TimerCreatedEvent
	(*TimerFiredEvent)(nil),                          // 11: dtmb.backend.v1.TimerFiredEvent
	(*OrchestratorStartedEvent)(nil),                 // 12: dtmb.backend.v1.OrchestratorStartedEvent
	(*OrchestratorCompletedEvent)(nil),               // 13: dtmb.backend.v1.OrchestratorCompletedEvent
	(*EventSentEvent)(nil),                           // 14: dtmb.backend.v1.EventSentEvent
	(*EventRaisedEvent)(nil),                         // 15: dtmb.backend.v1.EventRaisedEvent
	(*GenericEvent)(nil),                             // 16: dtmb.backend.v1.GenericEvent
	(*HistoryStateEvent)(nil),                        // 17: dtmb.backend.v1.HistoryStateEvent
	(*ContinueAsNewEvent)(nil),                       // 18: dtmb.backend.v1.ContinueAsNewEvent
	(*ExecutionSuspendedEvent)(nil),                  // 19: dtmb.backend.v1.ExecutionSuspendedEvent
	(*ExecutionResumedEvent)(nil),                    // 20: dtmb.backend.v1.ExecutionResumedEvent
	(*ExecutionStartedEvent_ParentInstanceInfo)(nil), // 21: dtmb.backend.v1.ExecutionStartedEvent.ParentInstanceInfo
	(*timestamppb.Timestamp)(nil),                    // 22: google.protobuf.Timestamp
	(*OrchestrationID)(nil),                          // 23: dtmb.backend.v1.OrchestrationID
	(*TraceContext)(nil),                             // 24: dtmb.backend.v1.TraceContext
}
var file_backend_v1_events_proto_depIdxs = []int32{
	22, // 0: dtmb.backend.v1.Event.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: dtmb.backend.v1.Event.execution_started:type_name -> dtmb.backend.v1.ExecutionStartedEvent
	2,  // 2: dtmb.backend.v1.Event.execution_completed:type_name -> dtmb.backend.v1.ExecutionCompletedEvent
	3,  // 3: dtmb.backend.v1.Event.execution_terminated:type_name -> dtmb.backend.v1.ExecutionTerminatedEvent
	4,  // 4: dtmb.backend.v1.Event.task_scheduled:type_name -> dtmb.backend.v1.TaskScheduledEvent
	5,  // 5: dtmb.backend.v1.Event.task_completed:type_name -> dtmb.backend.v1.TaskCompletedEvent
	6,  // 6: dtmb.backend.v1.Event.task_failed:type_name -> dtmb.backend.v1.TaskFailedEvent
	7,  // 7: dtmb.backend.v1.Event.sub_orchestration_instance_created:type_name -> dtmb.backend.v1.SubOrchestrationInstanceCreatedEvent
	8,  // 8: dtmb.backend.v1.Event.sub_orchestration_instance_completed:type_name -> dtmb.backend.v1.SubOrchestrationInstanceCompletedEvent
	9,  // 9: dtmb.backend.v1.Event.sub_orchestration_instance_failed:type_name -> dtmb.backend.v1.SubOrchestrationInstanceFailedEvent
	10, // 10: dtmb.backend.v1.Event.timer_created:type_name -> dtmb.backend.v1.TimerCreatedEvent
	11, // 11: dtmb.backend.v1.Event.timer_fired:type_name -> dtmb.backend.v1.TimerFiredEvent
	12, // 12: dtmb.backend.v1.Event.orchestrator_started:type_name -> dtmb.backend.v1.OrchestratorStartedEvent
	13, // 13: dtmb.backend.v1.Event.orchestrator_completed:type_name -> dtmb.backend.v1.OrchestratorCompletedEvent
	14, // 14: dtmb.backend.v1.Event.event_sent:type_name -> dtmb.backend.v1.EventSentEvent
	15, // 15: dtmb.backend.v1.Event.event_raised:type_name -> dtmb.backend.v1.EventRaisedEvent
	16, // 16: dtmb.backend.v1.Event.generic_event:type_name -> dtmb.backend.v1.GenericEvent
	17, // 17: dtmb.backend.v1.Event.history_state:type_name -> dtmb.backend.v1.HistoryStateEvent
	18, // 18: dtmb.backend.v1.Event.continue_as_new:type_name -> dtmb.backend.v1.ContinueAsNewEvent
	19, // 19: dtmb.backend.v1.Event.execution_suspended:type_name -> dtmb.backend.v1.ExecutionSuspendedEvent
	20, // 20: dtmb.backend.v1.Event.execution_resumed:type_name -> dtmb.backend.v1.ExecutionResumedEvent
	23, // 21: dtmb.backend.v1.ExecutionStartedEvent.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	22, // 22: dtmb.backend.v1.ExecutionStartedEvent.scheduled_time:type_name -> google.protobuf.Timestamp
	21, // 23: dtmb.backend.v1.ExecutionStartedEvent.parent:type_name -> dtmb.backend.v1.ExecutionStartedEvent.ParentInstanceInfo
	24, // 24: dtmb.backend.v1.ExecutionStartedEvent.trace_context:type_name -> dtmb.backend.v1.TraceContext
	23, // 25: dtmb.backend.v1.ExecutionStartedEvent.ParentInstanceInfo.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_backend_v1_events_proto_init() }
func file_backend_v1_events_proto_init() {
	if File_backend_v1_events_proto != nil {
		return
	}
	file_backend_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTerminatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrchestrationInstanceFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerFiredEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRaisedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionSuspendedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionResumedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStartedEvent_ParentInstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_ExecutionStarted)(nil),
		(*Event_ExecutionCompleted)(nil),
		(*Event_ExecutionTerminated)(nil),
		(*Event_TaskScheduled)(nil),
		(*Event_TaskCompleted)(nil),
		(*Event_TaskFailed)(nil),
		(*Event_SubOrchestrationInstanceCreated)(nil),
		(*Event_SubOrchestrationInstanceCompleted)(nil),
		(*Event_SubOrchestrationInstanceFailed)(nil),
		(*Event_TimerCreated)(nil),
		(*Event_TimerFired)(nil),
		(*Event_OrchestratorStarted)(nil),
		(*Event_OrchestratorCompleted)(nil),
		(*Event_EventSent)(nil),
		(*Event_EventRaised)(nil),
		(*Event_GenericEvent)(nil),
		(*Event_HistoryState)(nil),
		(*Event_ContinueAsNew)(nil),
		(*Event_ExecutionSuspended)(nil),
		(*Event_ExecutionResumed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_v1_events_proto_goTypes,
		DependencyIndexes: file_backend_v1_events_proto_depIdxs,
		MessageInfos:      file_backend_v1_events_proto_msgTypes,
	}.Build()
	File_backend_v1_events_proto = out.File
	file_backend_v1_events_proto_rawDesc = nil
	file_backend_v1_events_proto_goTypes = nil
	file_backend_v1_events_proto_depIdxs = nil
}
