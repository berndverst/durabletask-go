// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: backend/v1/orchestrator-actions.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OrchestratorActionType:
	//
	//	*OrchestratorAction_ScheduleActivity
	//	*OrchestratorAction_CreateSubOrchestration
	//	*OrchestratorAction_CreateTimer
	//	*OrchestratorAction_SendEvent
	//	*OrchestratorAction_CompleteOrchestration
	//	*OrchestratorAction_TerminateOrchestration
	OrchestratorActionType isOrchestratorAction_OrchestratorActionType `protobuf_oneof:"orchestrator_action_type"`
}

func (x *OrchestratorAction) Reset() {
	*x = OrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorAction) ProtoMessage() {}

func (x *OrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorAction.ProtoReflect.Descriptor instead.
func (*OrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{0}
}

func (m *OrchestratorAction) GetOrchestratorActionType() isOrchestratorAction_OrchestratorActionType {
	if m != nil {
		return m.OrchestratorActionType
	}
	return nil
}

func (x *OrchestratorAction) GetScheduleActivity() *ScheduleActivityOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_ScheduleActivity); ok {
		return x.ScheduleActivity
	}
	return nil
}

func (x *OrchestratorAction) GetCreateSubOrchestration() *CreateSubOrchestrationOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CreateSubOrchestration); ok {
		return x.CreateSubOrchestration
	}
	return nil
}

func (x *OrchestratorAction) GetCreateTimer() *CreateTimerOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CreateTimer); ok {
		return x.CreateTimer
	}
	return nil
}

func (x *OrchestratorAction) GetSendEvent() *SendEventOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_SendEvent); ok {
		return x.SendEvent
	}
	return nil
}

func (x *OrchestratorAction) GetCompleteOrchestration() *CompleteOrchestrationOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_CompleteOrchestration); ok {
		return x.CompleteOrchestration
	}
	return nil
}

func (x *OrchestratorAction) GetTerminateOrchestration() *TerminateOrchestrationOrchestratorAction {
	if x, ok := x.GetOrchestratorActionType().(*OrchestratorAction_TerminateOrchestration); ok {
		return x.TerminateOrchestration
	}
	return nil
}

type isOrchestratorAction_OrchestratorActionType interface {
	isOrchestratorAction_OrchestratorActionType()
}

type OrchestratorAction_ScheduleActivity struct {
	ScheduleActivity *ScheduleActivityOrchestratorAction `protobuf:"bytes,100,opt,name=schedule_activity,json=scheduleActivity,proto3,oneof"`
}

type OrchestratorAction_CreateSubOrchestration struct {
	CreateSubOrchestration *CreateSubOrchestrationOrchestratorAction `protobuf:"bytes,101,opt,name=create_sub_orchestration,json=createSubOrchestration,proto3,oneof"`
}

type OrchestratorAction_CreateTimer struct {
	CreateTimer *CreateTimerOrchestratorAction `protobuf:"bytes,102,opt,name=create_timer,json=createTimer,proto3,oneof"`
}

type OrchestratorAction_SendEvent struct {
	SendEvent *SendEventOrchestratorAction `protobuf:"bytes,103,opt,name=send_event,json=sendEvent,proto3,oneof"`
}

type OrchestratorAction_CompleteOrchestration struct {
	CompleteOrchestration *CompleteOrchestrationOrchestratorAction `protobuf:"bytes,104,opt,name=complete_orchestration,json=completeOrchestration,proto3,oneof"`
}

type OrchestratorAction_TerminateOrchestration struct {
	TerminateOrchestration *TerminateOrchestrationOrchestratorAction `protobuf:"bytes,105,opt,name=terminate_orchestration,json=terminateOrchestration,proto3,oneof"`
}

func (*OrchestratorAction_ScheduleActivity) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CreateSubOrchestration) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CreateTimer) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_SendEvent) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_CompleteOrchestration) isOrchestratorAction_OrchestratorActionType() {}

func (*OrchestratorAction_TerminateOrchestration) isOrchestratorAction_OrchestratorActionType() {}

// Requests scheduling a new activity execution.
type ScheduleActivityOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Activity name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Activity version
	// string version = 2;
	// Optionally make the activity start at a later time.
	// If not specified, the activity will start immediately.
	StartAt *Delay `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// Optional input data
	Input []byte `protobuf:"bytes,10,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ScheduleActivityOrchestratorAction) Reset() {
	*x = ScheduleActivityOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActivityOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActivityOrchestratorAction) ProtoMessage() {}

func (x *ScheduleActivityOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActivityOrchestratorAction.ProtoReflect.Descriptor instead.
func (*ScheduleActivityOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleActivityOrchestratorAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleActivityOrchestratorAction) GetStartAt() *Delay {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ScheduleActivityOrchestratorAction) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateSubOrchestrationOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance to create.
	OrchestrationId string `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the orchestration to start.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration to start.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Optional orchestration input data.
	Input []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// Optionally make the orchestration start at a later time.
	// If not specified, the orchestration will start immediately.
	StartAt *Delay `protobuf:"bytes,10,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
}

func (x *CreateSubOrchestrationOrchestratorAction) Reset() {
	*x = CreateSubOrchestrationOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubOrchestrationOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubOrchestrationOrchestratorAction) ProtoMessage() {}

func (x *CreateSubOrchestrationOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubOrchestrationOrchestratorAction.ProtoReflect.Descriptor instead.
func (*CreateSubOrchestrationOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSubOrchestrationOrchestratorAction) GetOrchestrationId() string {
	if x != nil {
		return x.OrchestrationId
	}
	return ""
}

func (x *CreateSubOrchestrationOrchestratorAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubOrchestrationOrchestratorAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateSubOrchestrationOrchestratorAction) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateSubOrchestrationOrchestratorAction) GetStartAt() *Delay {
	if x != nil {
		return x.StartAt
	}
	return nil
}

type CreateTimerOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the delay to execute the timer
	StartAt *Delay `protobuf:"bytes,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
}

func (x *CreateTimerOrchestratorAction) Reset() {
	*x = CreateTimerOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTimerOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTimerOrchestratorAction) ProtoMessage() {}

func (x *CreateTimerOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTimerOrchestratorAction.ProtoReflect.Descriptor instead.
func (*CreateTimerOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTimerOrchestratorAction) GetStartAt() *Delay {
	if x != nil {
		return x.StartAt
	}
	return nil
}

type SendEventOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The given ID of the orchestration instance.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Event name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional event data
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendEventOrchestratorAction) Reset() {
	*x = SendEventOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventOrchestratorAction) ProtoMessage() {}

func (x *SendEventOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventOrchestratorAction.ProtoReflect.Descriptor instead.
func (*SendEventOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{4}
}

func (x *SendEventOrchestratorAction) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SendEventOrchestratorAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SendEventOrchestratorAction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Indicates the orchestration has completed, either successfully or with an error
type CompleteOrchestrationOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the completed orchestration
	OrchestrationStatus OrchestrationStatus `protobuf:"varint,1,opt,name=orchestration_status,json=orchestrationStatus,proto3,enum=dtmb.backend.v1.OrchestrationStatus" json:"orchestration_status,omitempty"`
	// Failure details for failed orchestrations
	FailureDetails *FailureDetails `protobuf:"bytes,3,opt,name=failure_details,json=failureDetails,proto3" json:"failure_details,omitempty"`
	// Optional output data
	Result []byte `protobuf:"bytes,10,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CompleteOrchestrationOrchestratorAction) Reset() {
	*x = CompleteOrchestrationOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteOrchestrationOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteOrchestrationOrchestratorAction) ProtoMessage() {}

func (x *CompleteOrchestrationOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteOrchestrationOrchestratorAction.ProtoReflect.Descriptor instead.
func (*CompleteOrchestrationOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteOrchestrationOrchestratorAction) GetOrchestrationStatus() OrchestrationStatus {
	if x != nil {
		return x.OrchestrationStatus
	}
	return OrchestrationStatus_UNKNOWN
}

func (x *CompleteOrchestrationOrchestratorAction) GetFailureDetails() *FailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

func (x *CompleteOrchestrationOrchestratorAction) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type TerminateOrchestrationOrchestratorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonRecursive bool `protobuf:"varint,3,opt,name=non_recursive,json=nonRecursive,proto3" json:"non_recursive,omitempty"`
	// Optional reason
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TerminateOrchestrationOrchestratorAction) Reset() {
	*x = TerminateOrchestrationOrchestratorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateOrchestrationOrchestratorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateOrchestrationOrchestratorAction) ProtoMessage() {}

func (x *TerminateOrchestrationOrchestratorAction) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_orchestrator_actions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateOrchestrationOrchestratorAction.ProtoReflect.Descriptor instead.
func (*TerminateOrchestrationOrchestratorAction) Descriptor() ([]byte, []int) {
	return file_backend_v1_orchestrator_actions_proto_rawDescGZIP(), []int{6}
}

func (x *TerminateOrchestrationOrchestratorAction) GetNonRecursive() bool {
	if x != nil {
		return x.NonRecursive
	}
	return false
}

func (x *TerminateOrchestrationOrchestratorAction) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_backend_v1_orchestrator_actions_proto protoreflect.FileDescriptor

var file_backend_v1_orchestrator_actions_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x05, 0x0a, 0x12, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x75, 0x0a, 0x18,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x17, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1a, 0x0a, 0x18, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0xcc, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x22,
	0x52, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x22, 0x66, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x27,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x14, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x48, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x67, 0x0a, 0x28, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x61, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x2f, 0x64, 0x74, 0x6d, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0xaa, 0x02, 0x26, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x2e, 0x44, 0x54, 0x4d, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_orchestrator_actions_proto_rawDescOnce sync.Once
	file_backend_v1_orchestrator_actions_proto_rawDescData = file_backend_v1_orchestrator_actions_proto_rawDesc
)

func file_backend_v1_orchestrator_actions_proto_rawDescGZIP() []byte {
	file_backend_v1_orchestrator_actions_proto_rawDescOnce.Do(func() {
		file_backend_v1_orchestrator_actions_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_orchestrator_actions_proto_rawDescData)
	})
	return file_backend_v1_orchestrator_actions_proto_rawDescData
}

var file_backend_v1_orchestrator_actions_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_backend_v1_orchestrator_actions_proto_goTypes = []interface{}{
	(*OrchestratorAction)(nil),                       // 0: dtmb.backend.v1.OrchestratorAction
	(*ScheduleActivityOrchestratorAction)(nil),       // 1: dtmb.backend.v1.ScheduleActivityOrchestratorAction
	(*CreateSubOrchestrationOrchestratorAction)(nil), // 2: dtmb.backend.v1.CreateSubOrchestrationOrchestratorAction
	(*CreateTimerOrchestratorAction)(nil),            // 3: dtmb.backend.v1.CreateTimerOrchestratorAction
	(*SendEventOrchestratorAction)(nil),              // 4: dtmb.backend.v1.SendEventOrchestratorAction
	(*CompleteOrchestrationOrchestratorAction)(nil),  // 5: dtmb.backend.v1.CompleteOrchestrationOrchestratorAction
	(*TerminateOrchestrationOrchestratorAction)(nil), // 6: dtmb.backend.v1.TerminateOrchestrationOrchestratorAction
	(*Delay)(nil),            // 7: dtmb.backend.v1.Delay
	(OrchestrationStatus)(0), // 8: dtmb.backend.v1.OrchestrationStatus
	(*FailureDetails)(nil),   // 9: dtmb.backend.v1.FailureDetails
}
var file_backend_v1_orchestrator_actions_proto_depIdxs = []int32{
	1,  // 0: dtmb.backend.v1.OrchestratorAction.schedule_activity:type_name -> dtmb.backend.v1.ScheduleActivityOrchestratorAction
	2,  // 1: dtmb.backend.v1.OrchestratorAction.create_sub_orchestration:type_name -> dtmb.backend.v1.CreateSubOrchestrationOrchestratorAction
	3,  // 2: dtmb.backend.v1.OrchestratorAction.create_timer:type_name -> dtmb.backend.v1.CreateTimerOrchestratorAction
	4,  // 3: dtmb.backend.v1.OrchestratorAction.send_event:type_name -> dtmb.backend.v1.SendEventOrchestratorAction
	5,  // 4: dtmb.backend.v1.OrchestratorAction.complete_orchestration:type_name -> dtmb.backend.v1.CompleteOrchestrationOrchestratorAction
	6,  // 5: dtmb.backend.v1.OrchestratorAction.terminate_orchestration:type_name -> dtmb.backend.v1.TerminateOrchestrationOrchestratorAction
	7,  // 6: dtmb.backend.v1.ScheduleActivityOrchestratorAction.start_at:type_name -> dtmb.backend.v1.Delay
	7,  // 7: dtmb.backend.v1.CreateSubOrchestrationOrchestratorAction.start_at:type_name -> dtmb.backend.v1.Delay
	7,  // 8: dtmb.backend.v1.CreateTimerOrchestratorAction.start_at:type_name -> dtmb.backend.v1.Delay
	8,  // 9: dtmb.backend.v1.CompleteOrchestrationOrchestratorAction.orchestration_status:type_name -> dtmb.backend.v1.OrchestrationStatus
	9,  // 10: dtmb.backend.v1.CompleteOrchestrationOrchestratorAction.failure_details:type_name -> dtmb.backend.v1.FailureDetails
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_backend_v1_orchestrator_actions_proto_init() }
func file_backend_v1_orchestrator_actions_proto_init() {
	if File_backend_v1_orchestrator_actions_proto != nil {
		return
	}
	file_backend_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_orchestrator_actions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActivityOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubOrchestrationOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTimerOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteOrchestrationOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_orchestrator_actions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateOrchestrationOrchestratorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_orchestrator_actions_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OrchestratorAction_ScheduleActivity)(nil),
		(*OrchestratorAction_CreateSubOrchestration)(nil),
		(*OrchestratorAction_CreateTimer)(nil),
		(*OrchestratorAction_SendEvent)(nil),
		(*OrchestratorAction_CompleteOrchestration)(nil),
		(*OrchestratorAction_TerminateOrchestration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_orchestrator_actions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_v1_orchestrator_actions_proto_goTypes,
		DependencyIndexes: file_backend_v1_orchestrator_actions_proto_depIdxs,
		MessageInfos:      file_backend_v1_orchestrator_actions_proto_msgTypes,
	}.Build()
	File_backend_v1_orchestrator_actions_proto = out.File
	file_backend_v1_orchestrator_actions_proto_rawDesc = nil
	file_backend_v1_orchestrator_actions_proto_goTypes = nil
	file_backend_v1_orchestrator_actions_proto_depIdxs = nil
}
