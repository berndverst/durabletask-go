// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: backend/v1/worker.proto

package backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for Ping.
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional instance ID for pings.
	// This is sent by the service in the first message for ConnectWorker.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Response for Ping.
type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{1}
}

// Request for ConnectWorker.
// Includes information about the current worker's capabilities
type ConnectWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the SDK used by the worker.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Maximum number of work items concurrently active on a worker across all types.
	// A value of 0 means no limit
	ConcurrentLimit uint32 `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
	// List of supported orchestraror functions.
	OrchestratorFunction []*ConnectWorkerRequest_OrchestratorFunctionType `protobuf:"bytes,20,rep,name=orchestrator_function,json=orchestratorFunction,proto3" json:"orchestrator_function,omitempty"`
	// List of supported activity functions.
	ActivityFunction []*ConnectWorkerRequest_ActivityFunctionType `protobuf:"bytes,21,rep,name=activity_function,json=activityFunction,proto3" json:"activity_function,omitempty"`
}

func (x *ConnectWorkerRequest) Reset() {
	*x = ConnectWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerRequest) ProtoMessage() {}

func (x *ConnectWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerRequest.ProtoReflect.Descriptor instead.
func (*ConnectWorkerRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectWorkerRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConnectWorkerRequest) GetConcurrentLimit() uint32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

func (x *ConnectWorkerRequest) GetOrchestratorFunction() []*ConnectWorkerRequest_OrchestratorFunctionType {
	if x != nil {
		return x.OrchestratorFunction
	}
	return nil
}

func (x *ConnectWorkerRequest) GetActivityFunction() []*ConnectWorkerRequest_ActivityFunctionType {
	if x != nil {
		return x.ActivityFunction
	}
	return nil
}

// Message sent by the server in the ConnectWorker stream.
type ConnectWorkerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message to include.
	// This is optional, and no message indicates a simple ping.
	//
	// Types that are assignable to Message:
	//
	//	*ConnectWorkerMessage_WorkerConfiguration
	//	*ConnectWorkerMessage_AbandonWorkItems
	//	*ConnectWorkerMessage_ExecuteOrchestration
	//	*ConnectWorkerMessage_ExecuteActivity
	Message isConnectWorkerMessage_Message `protobuf_oneof:"message"`
}

func (x *ConnectWorkerMessage) Reset() {
	*x = ConnectWorkerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerMessage) ProtoMessage() {}

func (x *ConnectWorkerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerMessage.ProtoReflect.Descriptor instead.
func (*ConnectWorkerMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{3}
}

func (m *ConnectWorkerMessage) GetMessage() isConnectWorkerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ConnectWorkerMessage) GetWorkerConfiguration() *WorkerConfiguration {
	if x, ok := x.GetMessage().(*ConnectWorkerMessage_WorkerConfiguration); ok {
		return x.WorkerConfiguration
	}
	return nil
}

func (x *ConnectWorkerMessage) GetAbandonWorkItems() *AbandonWorkItemsMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerMessage_AbandonWorkItems); ok {
		return x.AbandonWorkItems
	}
	return nil
}

func (x *ConnectWorkerMessage) GetExecuteOrchestration() *ExecuteOrchestrationMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerMessage_ExecuteOrchestration); ok {
		return x.ExecuteOrchestration
	}
	return nil
}

func (x *ConnectWorkerMessage) GetExecuteActivity() *ExecuteActivityMessage {
	if x, ok := x.GetMessage().(*ConnectWorkerMessage_ExecuteActivity); ok {
		return x.ExecuteActivity
	}
	return nil
}

type isConnectWorkerMessage_Message interface {
	isConnectWorkerMessage_Message()
}

type ConnectWorkerMessage_WorkerConfiguration struct {
	// Send certain configuration options for the worker.
	// This is sent once, and only once, in response to the first message from the worker on ConnectWorker.
	// Clients should expect to receive this message within the first seconds of the ConnectWorker stream being established, and should cancel the stream if they don't receive in that time frame (or if they receive a different message before the WorkerConfiguration one).
	WorkerConfiguration *WorkerConfiguration `protobuf:"bytes,1,opt,name=worker_configuration,json=workerConfiguration,proto3,oneof"`
}

type ConnectWorkerMessage_AbandonWorkItems struct {
	// Request the worker to abandon work items related to an orchestration.
	AbandonWorkItems *AbandonWorkItemsMessage `protobuf:"bytes,2,opt,name=abandon_work_items,json=abandonWorkItems,proto3,oneof"`
}

type ConnectWorkerMessage_ExecuteOrchestration struct {
	// Start the execution of an orchestration work item.
	ExecuteOrchestration *ExecuteOrchestrationMessage `protobuf:"bytes,10,opt,name=execute_orchestration,json=executeOrchestration,proto3,oneof"`
}

type ConnectWorkerMessage_ExecuteActivity struct {
	// Start the execution of an activity work item.
	ExecuteActivity *ExecuteActivityMessage `protobuf:"bytes,11,opt,name=execute_activity,json=executeActivity,proto3,oneof"`
}

func (*ConnectWorkerMessage_WorkerConfiguration) isConnectWorkerMessage_Message() {}

func (*ConnectWorkerMessage_AbandonWorkItems) isConnectWorkerMessage_Message() {}

func (*ConnectWorkerMessage_ExecuteOrchestration) isConnectWorkerMessage_Message() {}

func (*ConnectWorkerMessage_ExecuteActivity) isConnectWorkerMessage_Message() {}

// WorkerConfiguration is one of the messages that can be sent by the server over ConnectWorker.
// It contains certain configuration options for the worker.
// This is normally sent in response to the first message from the worker on ConnectWorker, but can be sent as update at any time.
type WorkerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the connected instance
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Maximum interval for the worker to send pings to the service.
	HealthCheckInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
}

func (x *WorkerConfiguration) Reset() {
	*x = WorkerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerConfiguration) ProtoMessage() {}

func (x *WorkerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerConfiguration.ProtoReflect.Descriptor instead.
func (*WorkerConfiguration) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerConfiguration) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WorkerConfiguration) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

// ExecuteOrchestrationMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an orchestration work item to execute.
type ExecuteOrchestrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Name of the orchestration.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the orchestration.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Completion token.
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Orchestration input data (optional).
	Input []byte `protobuf:"bytes,10,opt,name=input,proto3" json:"input,omitempty"`
	// Retry count.
	RetryCount uint32 `protobuf:"varint,20,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
}

func (x *ExecuteOrchestrationMessage) Reset() {
	*x = ExecuteOrchestrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteOrchestrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOrchestrationMessage) ProtoMessage() {}

func (x *ExecuteOrchestrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOrchestrationMessage.ProtoReflect.Descriptor instead.
func (*ExecuteOrchestrationMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteOrchestrationMessage) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *ExecuteOrchestrationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *ExecuteOrchestrationMessage) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExecuteOrchestrationMessage) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

// ExecuteActivityMessage is one of the messages that can be sent by the server over ConnectWorker.
// It contains an activity work item to execute.
type ExecuteActivityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Sequence number
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Name of the orchestration.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the activity.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Completion token.
	CompletionToken string `protobuf:"bytes,5,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Activity input data (optional).
	Input []byte `protobuf:"bytes,10,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ExecuteActivityMessage) Reset() {
	*x = ExecuteActivityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteActivityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActivityMessage) ProtoMessage() {}

func (x *ExecuteActivityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActivityMessage.ProtoReflect.Descriptor instead.
func (*ExecuteActivityMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteActivityMessage) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *ExecuteActivityMessage) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ExecuteActivityMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteActivityMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExecuteActivityMessage) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *ExecuteActivityMessage) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

// AbandonWorkItemsMessage is one of the messages that can be sent by the server over ConnectWorker.
// It requests to abandon any work item related to an orchestration.
type AbandonWorkItemsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
}

func (x *AbandonWorkItemsMessage) Reset() {
	*x = AbandonWorkItemsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemsMessage) ProtoMessage() {}

func (x *AbandonWorkItemsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemsMessage.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemsMessage) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{7}
}

func (x *AbandonWorkItemsMessage) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

// Request for GetOrchestrationHistory.
type GetOrchestrationHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Hash of the last item in the history stack that is cached on the worker.
	// If this is empty, returns the entire history.
	LastItem []byte `protobuf:"bytes,2,opt,name=last_item,json=lastItem,proto3" json:"last_item,omitempty"`
}

func (x *GetOrchestrationHistoryRequest) Reset() {
	*x = GetOrchestrationHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrchestrationHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrchestrationHistoryRequest) ProtoMessage() {}

func (x *GetOrchestrationHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrchestrationHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetOrchestrationHistoryRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrchestrationHistoryRequest) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *GetOrchestrationHistoryRequest) GetLastItem() []byte {
	if x != nil {
		return x.LastItem
	}
	return nil
}

// Response for GetOrchestrationHistory.
type GetOrchestrationHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of history events.
	// The list may start with an event with sequence number greater than 0 if the request contained a last_item that matched an item in the history stack.
	Event []*Event `protobuf:"bytes,1,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *GetOrchestrationHistoryResponse) Reset() {
	*x = GetOrchestrationHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrchestrationHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrchestrationHistoryResponse) ProtoMessage() {}

func (x *GetOrchestrationHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrchestrationHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetOrchestrationHistoryResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrchestrationHistoryResponse) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Request for CompleteWorkItem.
type CompleteWorkItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WorkItem:
	//
	//	*CompleteWorkItemRequest_Orchestration
	//	*CompleteWorkItemRequest_Activity
	WorkItem isCompleteWorkItemRequest_WorkItem `protobuf_oneof:"work_item"`
}

func (x *CompleteWorkItemRequest) Reset() {
	*x = CompleteWorkItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkItemRequest) ProtoMessage() {}

func (x *CompleteWorkItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkItemRequest.ProtoReflect.Descriptor instead.
func (*CompleteWorkItemRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{10}
}

func (m *CompleteWorkItemRequest) GetWorkItem() isCompleteWorkItemRequest_WorkItem {
	if m != nil {
		return m.WorkItem
	}
	return nil
}

func (x *CompleteWorkItemRequest) GetOrchestration() *CompleteWorkItemRequest_CompleteOrchestrationRequest {
	if x, ok := x.GetWorkItem().(*CompleteWorkItemRequest_Orchestration); ok {
		return x.Orchestration
	}
	return nil
}

func (x *CompleteWorkItemRequest) GetActivity() *CompleteWorkItemRequest_CompleteActivityRequest {
	if x, ok := x.GetWorkItem().(*CompleteWorkItemRequest_Activity); ok {
		return x.Activity
	}
	return nil
}

type isCompleteWorkItemRequest_WorkItem interface {
	isCompleteWorkItemRequest_WorkItem()
}

type CompleteWorkItemRequest_Orchestration struct {
	Orchestration *CompleteWorkItemRequest_CompleteOrchestrationRequest `protobuf:"bytes,1,opt,name=orchestration,proto3,oneof"`
}

type CompleteWorkItemRequest_Activity struct {
	Activity *CompleteWorkItemRequest_CompleteActivityRequest `protobuf:"bytes,2,opt,name=activity,proto3,oneof"`
}

func (*CompleteWorkItemRequest_Orchestration) isCompleteWorkItemRequest_WorkItem() {}

func (*CompleteWorkItemRequest_Activity) isCompleteWorkItemRequest_WorkItem() {}

// Response for CompleteWorkItem.
type CompleteWorkItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteWorkItemResponse) Reset() {
	*x = CompleteWorkItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkItemResponse) ProtoMessage() {}

func (x *CompleteWorkItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkItemResponse.ProtoReflect.Descriptor instead.
func (*CompleteWorkItemResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{11}
}

// Request for AbandonWorkItemRequest.
type AbandonWorkItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WorkItem:
	//
	//	*AbandonWorkItemRequest_Orchestration
	//	*AbandonWorkItemRequest_Activity
	WorkItem isAbandonWorkItemRequest_WorkItem `protobuf_oneof:"work_item"`
}

func (x *AbandonWorkItemRequest) Reset() {
	*x = AbandonWorkItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemRequest) ProtoMessage() {}

func (x *AbandonWorkItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemRequest.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{12}
}

func (m *AbandonWorkItemRequest) GetWorkItem() isAbandonWorkItemRequest_WorkItem {
	if m != nil {
		return m.WorkItem
	}
	return nil
}

func (x *AbandonWorkItemRequest) GetOrchestration() *AbandonWorkItemRequest_AbandonOrchestrationRequest {
	if x, ok := x.GetWorkItem().(*AbandonWorkItemRequest_Orchestration); ok {
		return x.Orchestration
	}
	return nil
}

func (x *AbandonWorkItemRequest) GetActivity() *AbandonWorkItemRequest_AbandonActivityRequest {
	if x, ok := x.GetWorkItem().(*AbandonWorkItemRequest_Activity); ok {
		return x.Activity
	}
	return nil
}

type isAbandonWorkItemRequest_WorkItem interface {
	isAbandonWorkItemRequest_WorkItem()
}

type AbandonWorkItemRequest_Orchestration struct {
	Orchestration *AbandonWorkItemRequest_AbandonOrchestrationRequest `protobuf:"bytes,1,opt,name=orchestration,proto3,oneof"`
}

type AbandonWorkItemRequest_Activity struct {
	Activity *AbandonWorkItemRequest_AbandonActivityRequest `protobuf:"bytes,2,opt,name=activity,proto3,oneof"`
}

func (*AbandonWorkItemRequest_Orchestration) isAbandonWorkItemRequest_WorkItem() {}

func (*AbandonWorkItemRequest_Activity) isAbandonWorkItemRequest_WorkItem() {}

// Response for AbandonWorkItemRequest.
type AbandonWorkItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbandonWorkItemResponse) Reset() {
	*x = AbandonWorkItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemResponse) ProtoMessage() {}

func (x *AbandonWorkItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemResponse.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{13}
}

// Request for BackOff.
type BackOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the instance making the request.
	// This is sent by the service in the first message for ConnectWorker.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Requested pause duration.
	// If negative or zero (empty), stops any back-off and allows the service to resume sending work items immediately.
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *BackOffRequest) Reset() {
	*x = BackOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackOffRequest) ProtoMessage() {}

func (x *BackOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackOffRequest.ProtoReflect.Descriptor instead.
func (*BackOffRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{14}
}

func (x *BackOffRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *BackOffRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Response for BackOff.
type BackOffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackOffResponse) Reset() {
	*x = BackOffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackOffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackOffResponse) ProtoMessage() {}

func (x *BackOffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackOffResponse.ProtoReflect.Descriptor instead.
func (*BackOffResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{15}
}

// Supported orchestrator function type
type ConnectWorkerRequest_OrchestratorFunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the orchestration.
	OrchestrationName string `protobuf:"bytes,1,opt,name=orchestration_name,json=orchestrationName,proto3" json:"orchestration_name,omitempty"`
	// Version of the orchestration (free-form).
	OrchestrationVersion string `protobuf:"bytes,2,opt,name=orchestration_version,json=orchestrationVersion,proto3" json:"orchestration_version,omitempty"`
	// Maximum number of work items concurrently active on a worker for a given orchestration
	// A value of 0 means no limit
	ConcurrentLimit uint32 `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) Reset() {
	*x = ConnectWorkerRequest_OrchestratorFunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerRequest_OrchestratorFunctionType) ProtoMessage() {}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerRequest_OrchestratorFunctionType.ProtoReflect.Descriptor instead.
func (*ConnectWorkerRequest_OrchestratorFunctionType) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) GetOrchestrationName() string {
	if x != nil {
		return x.OrchestrationName
	}
	return ""
}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) GetOrchestrationVersion() string {
	if x != nil {
		return x.OrchestrationVersion
	}
	return ""
}

func (x *ConnectWorkerRequest_OrchestratorFunctionType) GetConcurrentLimit() uint32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

// Supported activity function type
type ConnectWorkerRequest_ActivityFunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the activity function.
	ActivityName string `protobuf:"bytes,3,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`
	// Maximum number of work items concurrently active on a worker for a given activity function
	// A value of 0 means no limit
	ConcurrentLimit uint32 `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
}

func (x *ConnectWorkerRequest_ActivityFunctionType) Reset() {
	*x = ConnectWorkerRequest_ActivityFunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectWorkerRequest_ActivityFunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectWorkerRequest_ActivityFunctionType) ProtoMessage() {}

func (x *ConnectWorkerRequest_ActivityFunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectWorkerRequest_ActivityFunctionType.ProtoReflect.Descriptor instead.
func (*ConnectWorkerRequest_ActivityFunctionType) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ConnectWorkerRequest_ActivityFunctionType) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ConnectWorkerRequest_ActivityFunctionType) GetConcurrentLimit() uint32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

type CompleteWorkItemRequest_CompleteOrchestrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Completion token sent in the ExecuteOrchestrationMessage.
	CompletionToken string `protobuf:"bytes,3,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Actions to schedule.
	Actions []*OrchestratorAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// Custom status to update (optional).
	CustomStatus string `protobuf:"bytes,5,opt,name=custom_status,json=customStatus,proto3" json:"custom_status,omitempty"`
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) Reset() {
	*x = CompleteWorkItemRequest_CompleteOrchestrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkItemRequest_CompleteOrchestrationRequest) ProtoMessage() {}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkItemRequest_CompleteOrchestrationRequest.ProtoReflect.Descriptor instead.
func (*CompleteWorkItemRequest_CompleteOrchestrationRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) GetActions() []*OrchestratorAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CompleteWorkItemRequest_CompleteOrchestrationRequest) GetCustomStatus() string {
	if x != nil {
		return x.CustomStatus
	}
	return ""
}

type CompleteWorkItemRequest_CompleteActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Sequence number
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Completion token sent in the ExecuteActivityMessage
	CompletionToken string `protobuf:"bytes,3,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
	// Output payload (optional)
	Result         []byte              `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	FailureDetails *TaskFailureDetails `protobuf:"bytes,5,opt,name=failure_details,json=failureDetails,proto3" json:"failure_details,omitempty"`
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) Reset() {
	*x = CompleteWorkItemRequest_CompleteActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkItemRequest_CompleteActivityRequest) ProtoMessage() {}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkItemRequest_CompleteActivityRequest.ProtoReflect.Descriptor instead.
func (*CompleteWorkItemRequest_CompleteActivityRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CompleteWorkItemRequest_CompleteActivityRequest) GetFailureDetails() *TaskFailureDetails {
	if x != nil {
		return x.FailureDetails
	}
	return nil
}

type AbandonWorkItemRequest_AbandonOrchestrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Completion token sent in the ExecuteActivityMessage
	CompletionToken string `protobuf:"bytes,3,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
}

func (x *AbandonWorkItemRequest_AbandonOrchestrationRequest) Reset() {
	*x = AbandonWorkItemRequest_AbandonOrchestrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemRequest_AbandonOrchestrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemRequest_AbandonOrchestrationRequest) ProtoMessage() {}

func (x *AbandonWorkItemRequest_AbandonOrchestrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemRequest_AbandonOrchestrationRequest.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemRequest_AbandonOrchestrationRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AbandonWorkItemRequest_AbandonOrchestrationRequest) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *AbandonWorkItemRequest_AbandonOrchestrationRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

type AbandonWorkItemRequest_AbandonActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the orchestration instance.
	OrchestrationId *OrchestrationID `protobuf:"bytes,1,opt,name=orchestration_id,json=orchestrationId,proto3" json:"orchestration_id,omitempty"`
	// Sequence number
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Completion token sent in the ExecuteActivityMessage
	CompletionToken string `protobuf:"bytes,3,opt,name=completion_token,json=completionToken,proto3" json:"completion_token,omitempty"`
}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) Reset() {
	*x = AbandonWorkItemRequest_AbandonActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_worker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonWorkItemRequest_AbandonActivityRequest) ProtoMessage() {}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_worker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonWorkItemRequest_AbandonActivityRequest.ProtoReflect.Descriptor instead.
func (*AbandonWorkItemRequest_AbandonActivityRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1_worker_proto_rawDescGZIP(), []int{12, 1}
}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) GetOrchestrationId() *OrchestrationID {
	if x != nil {
		return x.OrchestrationId
	}
	return nil
}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *AbandonWorkItemRequest_AbandonActivityRequest) GetCompletionToken() string {
	if x != nil {
		return x.CompletionToken
	}
	return ""
}

var File_backend_v1_worker_proto protoreflect.FileDescriptor

var file_backend_v1_worker_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x73, 0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa9, 0x01, 0x0a, 0x18, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x66,
	0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x59, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x12, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xfd, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x66, 0x0a, 0x17, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x4f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x06, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6d, 0x0a, 0x0d, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x1a, 0xfa, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x74, 0x6d,
	0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xa0, 0x02,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1a, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x16, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0d, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a,
	0x95, 0x01, 0x0a, 0x1b, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb9, 0x01, 0x0a, 0x16, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0f,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x19, 0x0a, 0x17, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x42,
	0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa1, 0x05, 0x0a, 0x0d, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30,
	0x01, 0x12, 0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x64,
	0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x28, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x2e, 0x64, 0x74,
	0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x74, 0x6d, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x6d, 0x62,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x74, 0x6d,
	0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x2f, 0x64, 0x74, 0x6d, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0xaa, 0x02, 0x26, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x2e, 0x44, 0x54, 0x4d, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_worker_proto_rawDescOnce sync.Once
	file_backend_v1_worker_proto_rawDescData = file_backend_v1_worker_proto_rawDesc
)

func file_backend_v1_worker_proto_rawDescGZIP() []byte {
	file_backend_v1_worker_proto_rawDescOnce.Do(func() {
		file_backend_v1_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_worker_proto_rawDescData)
	})
	return file_backend_v1_worker_proto_rawDescData
}

var file_backend_v1_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_backend_v1_worker_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                                          // 0: dtmb.backend.v1.PingRequest
	(*PingResponse)(nil),                                         // 1: dtmb.backend.v1.PingResponse
	(*ConnectWorkerRequest)(nil),                                 // 2: dtmb.backend.v1.ConnectWorkerRequest
	(*ConnectWorkerMessage)(nil),                                 // 3: dtmb.backend.v1.ConnectWorkerMessage
	(*WorkerConfiguration)(nil),                                  // 4: dtmb.backend.v1.WorkerConfiguration
	(*ExecuteOrchestrationMessage)(nil),                          // 5: dtmb.backend.v1.ExecuteOrchestrationMessage
	(*ExecuteActivityMessage)(nil),                               // 6: dtmb.backend.v1.ExecuteActivityMessage
	(*AbandonWorkItemsMessage)(nil),                              // 7: dtmb.backend.v1.AbandonWorkItemsMessage
	(*GetOrchestrationHistoryRequest)(nil),                       // 8: dtmb.backend.v1.GetOrchestrationHistoryRequest
	(*GetOrchestrationHistoryResponse)(nil),                      // 9: dtmb.backend.v1.GetOrchestrationHistoryResponse
	(*CompleteWorkItemRequest)(nil),                              // 10: dtmb.backend.v1.CompleteWorkItemRequest
	(*CompleteWorkItemResponse)(nil),                             // 11: dtmb.backend.v1.CompleteWorkItemResponse
	(*AbandonWorkItemRequest)(nil),                               // 12: dtmb.backend.v1.AbandonWorkItemRequest
	(*AbandonWorkItemResponse)(nil),                              // 13: dtmb.backend.v1.AbandonWorkItemResponse
	(*BackOffRequest)(nil),                                       // 14: dtmb.backend.v1.BackOffRequest
	(*BackOffResponse)(nil),                                      // 15: dtmb.backend.v1.BackOffResponse
	(*ConnectWorkerRequest_OrchestratorFunctionType)(nil),        // 16: dtmb.backend.v1.ConnectWorkerRequest.OrchestratorFunctionType
	(*ConnectWorkerRequest_ActivityFunctionType)(nil),            // 17: dtmb.backend.v1.ConnectWorkerRequest.ActivityFunctionType
	(*CompleteWorkItemRequest_CompleteOrchestrationRequest)(nil), // 18: dtmb.backend.v1.CompleteWorkItemRequest.CompleteOrchestrationRequest
	(*CompleteWorkItemRequest_CompleteActivityRequest)(nil),      // 19: dtmb.backend.v1.CompleteWorkItemRequest.CompleteActivityRequest
	(*AbandonWorkItemRequest_AbandonOrchestrationRequest)(nil),   // 20: dtmb.backend.v1.AbandonWorkItemRequest.AbandonOrchestrationRequest
	(*AbandonWorkItemRequest_AbandonActivityRequest)(nil),        // 21: dtmb.backend.v1.AbandonWorkItemRequest.AbandonActivityRequest
	(*durationpb.Duration)(nil),                                  // 22: google.protobuf.Duration
	(*OrchestrationID)(nil),                                      // 23: dtmb.backend.v1.OrchestrationID
	(*Event)(nil),                                                // 24: dtmb.backend.v1.Event
	(*OrchestratorAction)(nil),                                   // 25: dtmb.backend.v1.OrchestratorAction
	(*TaskFailureDetails)(nil),                                   // 26: dtmb.backend.v1.TaskFailureDetails
	(*MetadataRequest)(nil),                                      // 27: dtmb.backend.v1.MetadataRequest
	(*MetadataResponse)(nil),                                     // 28: dtmb.backend.v1.MetadataResponse
}
var file_backend_v1_worker_proto_depIdxs = []int32{
	16, // 0: dtmb.backend.v1.ConnectWorkerRequest.orchestrator_function:type_name -> dtmb.backend.v1.ConnectWorkerRequest.OrchestratorFunctionType
	17, // 1: dtmb.backend.v1.ConnectWorkerRequest.activity_function:type_name -> dtmb.backend.v1.ConnectWorkerRequest.ActivityFunctionType
	4,  // 2: dtmb.backend.v1.ConnectWorkerMessage.worker_configuration:type_name -> dtmb.backend.v1.WorkerConfiguration
	7,  // 3: dtmb.backend.v1.ConnectWorkerMessage.abandon_work_items:type_name -> dtmb.backend.v1.AbandonWorkItemsMessage
	5,  // 4: dtmb.backend.v1.ConnectWorkerMessage.execute_orchestration:type_name -> dtmb.backend.v1.ExecuteOrchestrationMessage
	6,  // 5: dtmb.backend.v1.ConnectWorkerMessage.execute_activity:type_name -> dtmb.backend.v1.ExecuteActivityMessage
	22, // 6: dtmb.backend.v1.WorkerConfiguration.health_check_interval:type_name -> google.protobuf.Duration
	23, // 7: dtmb.backend.v1.ExecuteOrchestrationMessage.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	23, // 8: dtmb.backend.v1.ExecuteActivityMessage.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	23, // 9: dtmb.backend.v1.AbandonWorkItemsMessage.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	23, // 10: dtmb.backend.v1.GetOrchestrationHistoryRequest.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	24, // 11: dtmb.backend.v1.GetOrchestrationHistoryResponse.event:type_name -> dtmb.backend.v1.Event
	18, // 12: dtmb.backend.v1.CompleteWorkItemRequest.orchestration:type_name -> dtmb.backend.v1.CompleteWorkItemRequest.CompleteOrchestrationRequest
	19, // 13: dtmb.backend.v1.CompleteWorkItemRequest.activity:type_name -> dtmb.backend.v1.CompleteWorkItemRequest.CompleteActivityRequest
	20, // 14: dtmb.backend.v1.AbandonWorkItemRequest.orchestration:type_name -> dtmb.backend.v1.AbandonWorkItemRequest.AbandonOrchestrationRequest
	21, // 15: dtmb.backend.v1.AbandonWorkItemRequest.activity:type_name -> dtmb.backend.v1.AbandonWorkItemRequest.AbandonActivityRequest
	22, // 16: dtmb.backend.v1.BackOffRequest.duration:type_name -> google.protobuf.Duration
	23, // 17: dtmb.backend.v1.CompleteWorkItemRequest.CompleteOrchestrationRequest.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	25, // 18: dtmb.backend.v1.CompleteWorkItemRequest.CompleteOrchestrationRequest.actions:type_name -> dtmb.backend.v1.OrchestratorAction
	23, // 19: dtmb.backend.v1.CompleteWorkItemRequest.CompleteActivityRequest.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	26, // 20: dtmb.backend.v1.CompleteWorkItemRequest.CompleteActivityRequest.failure_details:type_name -> dtmb.backend.v1.TaskFailureDetails
	23, // 21: dtmb.backend.v1.AbandonWorkItemRequest.AbandonOrchestrationRequest.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	23, // 22: dtmb.backend.v1.AbandonWorkItemRequest.AbandonActivityRequest.orchestration_id:type_name -> dtmb.backend.v1.OrchestrationID
	0,  // 23: dtmb.backend.v1.TaskHubWorker.Ping:input_type -> dtmb.backend.v1.PingRequest
	27, // 24: dtmb.backend.v1.TaskHubWorker.Metadata:input_type -> dtmb.backend.v1.MetadataRequest
	2,  // 25: dtmb.backend.v1.TaskHubWorker.ConnectWorker:input_type -> dtmb.backend.v1.ConnectWorkerRequest
	8,  // 26: dtmb.backend.v1.TaskHubWorker.GetOrchestrationHistory:input_type -> dtmb.backend.v1.GetOrchestrationHistoryRequest
	10, // 27: dtmb.backend.v1.TaskHubWorker.CompleteWorkItem:input_type -> dtmb.backend.v1.CompleteWorkItemRequest
	12, // 28: dtmb.backend.v1.TaskHubWorker.AbandonWorkItem:input_type -> dtmb.backend.v1.AbandonWorkItemRequest
	14, // 29: dtmb.backend.v1.TaskHubWorker.BackOff:input_type -> dtmb.backend.v1.BackOffRequest
	1,  // 30: dtmb.backend.v1.TaskHubWorker.Ping:output_type -> dtmb.backend.v1.PingResponse
	28, // 31: dtmb.backend.v1.TaskHubWorker.Metadata:output_type -> dtmb.backend.v1.MetadataResponse
	3,  // 32: dtmb.backend.v1.TaskHubWorker.ConnectWorker:output_type -> dtmb.backend.v1.ConnectWorkerMessage
	9,  // 33: dtmb.backend.v1.TaskHubWorker.GetOrchestrationHistory:output_type -> dtmb.backend.v1.GetOrchestrationHistoryResponse
	11, // 34: dtmb.backend.v1.TaskHubWorker.CompleteWorkItem:output_type -> dtmb.backend.v1.CompleteWorkItemResponse
	13, // 35: dtmb.backend.v1.TaskHubWorker.AbandonWorkItem:output_type -> dtmb.backend.v1.AbandonWorkItemResponse
	15, // 36: dtmb.backend.v1.TaskHubWorker.BackOff:output_type -> dtmb.backend.v1.BackOffResponse
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_backend_v1_worker_proto_init() }
func file_backend_v1_worker_proto_init() {
	if File_backend_v1_worker_proto != nil {
		return
	}
	file_backend_v1_common_proto_init()
	file_backend_v1_events_proto_init()
	file_backend_v1_actions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteOrchestrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteActivityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrchestrationHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrchestrationHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackOffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerRequest_OrchestratorFunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectWorkerRequest_ActivityFunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkItemRequest_CompleteOrchestrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkItemRequest_CompleteActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemRequest_AbandonOrchestrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_worker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonWorkItemRequest_AbandonActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_worker_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ConnectWorkerMessage_WorkerConfiguration)(nil),
		(*ConnectWorkerMessage_AbandonWorkItems)(nil),
		(*ConnectWorkerMessage_ExecuteOrchestration)(nil),
		(*ConnectWorkerMessage_ExecuteActivity)(nil),
	}
	file_backend_v1_worker_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CompleteWorkItemRequest_Orchestration)(nil),
		(*CompleteWorkItemRequest_Activity)(nil),
	}
	file_backend_v1_worker_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AbandonWorkItemRequest_Orchestration)(nil),
		(*AbandonWorkItemRequest_Activity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_v1_worker_proto_goTypes,
		DependencyIndexes: file_backend_v1_worker_proto_depIdxs,
		MessageInfos:      file_backend_v1_worker_proto_msgTypes,
	}.Build()
	File_backend_v1_worker_proto = out.File
	file_backend_v1_worker_proto_rawDesc = nil
	file_backend_v1_worker_proto_goTypes = nil
	file_backend_v1_worker_proto_depIdxs = nil
}
